
adcInt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005050  08005050  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005058  08005058  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000068  080050c8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080050c8  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8af  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021ef  00000000  00000000  0002b98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000776  00000000  00000000  0002e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002396c  00000000  00000000  0002ecce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df43  00000000  00000000  0005263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7432  00000000  00000000  0006057d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000307c  00000000  00000000  001379b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0013aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f74 	.word	0x08004f74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004f74 	.word	0x08004f74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	0000      	movs	r0, r0
	...

08000f28 <ConvertDieTempADCtoFloat>:


#include "dieTemp.h"

float ConvertDieTempADCtoFloat(uint16_t* adcVal)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	return (V_REF/ADC_MAX * (*adcVal) - V_25)/AVG_SLOPE - 25.0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb0d 	bl	8000554 <__aeabi_i2d>
 8000f3a:	a318      	add	r3, pc, #96	; (adr r3, 8000f9c <ConvertDieTempADCtoFloat+0x74>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fb72 	bl	8000628 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	a315      	add	r3, pc, #84	; (adr r3, 8000fa4 <ConvertDieTempADCtoFloat+0x7c>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff f9b1 	bl	80002b8 <__aeabi_dsub>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	a313      	add	r3, pc, #76	; (adr r3, 8000fac <ConvertDieTempADCtoFloat+0x84>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fc8a 	bl	800087c <__aeabi_ddiv>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <ConvertDieTempADCtoFloat+0x70>)
 8000f76:	f7ff f99f 	bl	80002b8 <__aeabi_dsub>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fe01 	bl	8000b88 <__aeabi_d2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	ee07 3a90 	vmov	s15, r3
}
 8000f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40390000 	.word	0x40390000
 8000f9c:	e734d9b4 	.word	0xe734d9b4
 8000fa0:	3f4a680c 	.word	0x3f4a680c
 8000fa4:	851eb852 	.word	0x851eb852
 8000fa8:	3fe851eb 	.word	0x3fe851eb
 8000fac:	47ae147b 	.word	0x47ae147b
 8000fb0:	3f647ae1 	.word	0x3f647ae1

08000fb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d013      	beq.n	8000ff4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fdc:	e000      	b.n	8000fe0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fde:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fe0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f9      	beq.n	8000fde <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // initialize count to 0:
	*count = 0;
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <main+0x78>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f000 fd9f 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f841 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 f9d3 	bl	80013c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800101e:	f000 f9a7 	bl	8001370 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001022:	f000 f8ad 	bl	8001180 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001026:	f000 f8ff 	bl	8001228 <MX_ADC2_Init>
  MX_ADC3_Init();
 800102a:	f000 f94f 	bl	80012cc <MX_ADC3_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // start ADCs
	  HAL_ADC_Start(&hadc1);
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <main+0x7c>)
 8001030:	f000 fe6a 	bl	8001d08 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <main+0x80>)
 8001036:	f000 fe67 	bl	8001d08 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc3);
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <main+0x84>)
 800103c:	f000 fe64 	bl	8001d08 <HAL_ADC_Start>

	  HAL_Delay(1000);			// delay 1s between prints
 8001040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001044:	f000 fdf8 	bl	8001c38 <HAL_Delay>

	  // get temp and voltage values from the ADC values
	  dieTemp = ConvertDieTempADCtoFloat(dieADC);
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <main+0x88>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff6b 	bl	8000f28 <ConvertDieTempADCtoFloat>
 8001052:	ed87 0a03 	vstr	s0, [r7, #12]
	  thermTemp = convertAnalogToTemperature(thermADC);
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <main+0x8c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fcc4 	bl	80019e8 <convertAnalogToTemperature>
 8001060:	ed87 0a02 	vstr	s0, [r7, #8]
	  potVoltage = ConvertPotADCtoFloat(potADC);
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <main+0x90>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fa5d 	bl	8001528 <ConvertPotADCtoFloat>
 800106e:	ed87 0a01 	vstr	s0, [r7, #4]

	  // print to the terminal
	  printf("ADC Outputs:\n"
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <main+0x94>)
 8001074:	f002 ff08 	bl	8003e88 <iprintf>
  {
 8001078:	e7d9      	b.n	800102e <main+0x2a>
 800107a:	bf00      	nop
 800107c:	200001ac 	.word	0x200001ac
 8001080:	20000084 	.word	0x20000084
 8001084:	200000cc 	.word	0x200000cc
 8001088:	20000114 	.word	0x20000114
 800108c:	200001a4 	.word	0x200001a4
 8001090:	200001a0 	.word	0x200001a0
 8001094:	200001a8 	.word	0x200001a8
 8001098:	08004f8c 	.word	0x08004f8c

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2234      	movs	r2, #52	; 0x34
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 ff41 	bl	8003f32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <SystemClock_Config+0xdc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <SystemClock_Config+0xdc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <SystemClock_Config+0xdc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <SystemClock_Config+0xe0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a25      	ldr	r2, [pc, #148]	; (800117c <SystemClock_Config+0xe0>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <SystemClock_Config+0xe0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2310      	movs	r3, #16
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800110c:	2308      	movs	r3, #8
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001110:	23b4      	movs	r3, #180	; 0xb4
 8001112:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001118:	2302      	movs	r3, #2
 800111a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4618      	mov	r0, r3
 8001126:	f002 f89f 	bl	8003268 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001130:	f000 f9f2 	bl	8001518 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001134:	f001 fcfe 	bl	8002b34 <HAL_PWREx_EnableOverDrive>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800113e:	f000 f9eb 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2302      	movs	r3, #2
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	2105      	movs	r1, #5
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fd37 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800116c:	f000 f9d4 	bl	8001518 <Error_Handler>
  }
}
 8001170:	bf00      	nop
 8001172:	3750      	adds	r7, #80	; 0x50
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_ADC1_Init+0x98>)
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <MX_ADC1_Init+0x9c>)
 8001196:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_ADC1_Init+0x98>)
 800119a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800119e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_ADC1_Init+0x98>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_ADC1_Init+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_ADC1_Init+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_ADC1_Init+0x98>)
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_ADC1_Init+0xa0>)
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_ADC1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_ADC1_Init+0x98>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_ADC1_Init+0x98>)
 80011dc:	2201      	movs	r2, #1
 80011de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_ADC1_Init+0x98>)
 80011e2:	f000 fd4d 	bl	8001c80 <HAL_ADC_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011ec:	f000 f994 	bl	8001518 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_ADC1_Init+0xa4>)
 80011f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80011f8:	2304      	movs	r3, #4
 80011fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_ADC1_Init+0x98>)
 8001202:	f000 ff85 	bl	8002110 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800120c:	f000 f984 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000084 	.word	0x20000084
 800121c:	40012000 	.word	0x40012000
 8001220:	0f000001 	.word	0x0f000001
 8001224:	10000012 	.word	0x10000012

08001228 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_ADC2_Init+0x98>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <MX_ADC2_Init+0x9c>)
 800123e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001246:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_ADC2_Init+0x98>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_ADC2_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_ADC2_Init+0x98>)
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <MX_ADC2_Init+0xa0>)
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001276:	2201      	movs	r2, #1
 8001278:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_ADC2_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_ADC2_Init+0x98>)
 8001284:	2201      	movs	r2, #1
 8001286:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_ADC2_Init+0x98>)
 800128a:	f000 fcf9 	bl	8001c80 <HAL_ADC_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001294:	f000 f940 	bl	8001518 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800129c:	2301      	movs	r3, #1
 800129e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_ADC2_Init+0x98>)
 80012aa:	f000 ff31 	bl	8002110 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80012b4:	f000 f930 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200000cc 	.word	0x200000cc
 80012c4:	40012100 	.word	0x40012100
 80012c8:	0f000001 	.word	0x0f000001

080012cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_ADC3_Init+0x98>)
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <MX_ADC3_Init+0x9c>)
 80012e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_ADC3_Init+0x98>)
 80012e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_ADC3_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_ADC3_Init+0x98>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_ADC3_Init+0x98>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_ADC3_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_ADC3_Init+0x98>)
 8001308:	2200      	movs	r2, #0
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_ADC3_Init+0x98>)
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <MX_ADC3_Init+0xa0>)
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_ADC3_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_ADC3_Init+0x98>)
 800131a:	2201      	movs	r2, #1
 800131c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_ADC3_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_ADC3_Init+0x98>)
 8001328:	2201      	movs	r2, #1
 800132a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_ADC3_Init+0x98>)
 800132e:	f000 fca7 	bl	8001c80 <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001338:	f000 f8ee 	bl	8001518 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800133c:	2301      	movs	r3, #1
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_ADC3_Init+0x98>)
 800134e:	f000 fedf 	bl	8002110 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001358:	f000 f8de 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000114 	.word	0x20000114
 8001368:	40012200 	.word	0x40012200
 800136c:	0f000001 	.word	0x0f000001

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART2_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART2_UART_Init+0x4c>)
 80013a8:	f002 f9fc 	bl	80037a4 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f000 f8b1 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000015c 	.word	0x2000015c
 80013c0:	40004400 	.word	0x40004400

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a2c      	ldr	r2, [pc, #176]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <MX_GPIO_Init+0xd0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a25      	ldr	r2, [pc, #148]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <MX_GPIO_Init+0xd0>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_GPIO_Init+0xd0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2120      	movs	r1, #32
 800144e:	4812      	ldr	r0, [pc, #72]	; (8001498 <MX_GPIO_Init+0xd4>)
 8001450:	f001 fb3c 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800145a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <MX_GPIO_Init+0xd8>)
 800146c:	f001 f99a 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001470:	2320      	movs	r3, #32
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_GPIO_Init+0xd4>)
 8001488:	f001 f98c 	bl	80027a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020800 	.word	0x40020800

080014a0 <__io_putchar>:

/* USER CODE BEGIN 4 */

// --- printf --- //
int __io_putchar(int ch){ 		// when printf is called
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);			// send char via ITM
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fd82 	bl	8000fb4 <ITM_SendChar>
	return 0;					// return exit code 0
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_ADC_ConvCpltCallback>:
// --- ADC callback conversion --- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	uint16_t myADCvalue = HAL_ADC_GetValue(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fe01 	bl	80020cc <HAL_ADC_GetValue>
 80014ca:	4603      	mov	r3, r0
 80014cc:	81fb      	strh	r3, [r7, #14]
	if(hadc == &hadc1){
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a0c      	ldr	r2, [pc, #48]	; (8001504 <HAL_ADC_ConvCpltCallback+0x48>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d104      	bne.n	80014e0 <HAL_ADC_ConvCpltCallback+0x24>
		*dieADC = myADCvalue;
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_ADC_ConvCpltCallback+0x4c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	89fa      	ldrh	r2, [r7, #14]
 80014dc:	801a      	strh	r2, [r3, #0]
	} else if (hadc == &hadc2) {
		*potADC = myADCvalue;
	} else {
		*thermADC = myADCvalue;
	}
	return;
 80014de:	e00d      	b.n	80014fc <HAL_ADC_ConvCpltCallback+0x40>
	} else if (hadc == &hadc2) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_ADC_ConvCpltCallback+0x50>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d104      	bne.n	80014f2 <HAL_ADC_ConvCpltCallback+0x36>
		*potADC = myADCvalue;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_ADC_ConvCpltCallback+0x54>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	89fa      	ldrh	r2, [r7, #14]
 80014ee:	801a      	strh	r2, [r3, #0]
	return;
 80014f0:	e004      	b.n	80014fc <HAL_ADC_ConvCpltCallback+0x40>
		*thermADC = myADCvalue;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_ADC_ConvCpltCallback+0x58>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	89fa      	ldrh	r2, [r7, #14]
 80014f8:	801a      	strh	r2, [r3, #0]
	return;
 80014fa:	bf00      	nop
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000084 	.word	0x20000084
 8001508:	200001a4 	.word	0x200001a4
 800150c:	200000cc 	.word	0x200000cc
 8001510:	200001a8 	.word	0x200001a8
 8001514:	200001a0 	.word	0x200001a0

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
 8001522:	0000      	movs	r0, r0
 8001524:	0000      	movs	r0, r0
	...

08001528 <ConvertPotADCtoFloat>:
 * ADC functionality for reading a pot voltage
 */

#include "pot.h"

float ConvertPotADCtoFloat(uint16_t* adcVal){
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	float result; 		// stores the resultant pot voltage
	switch (*adcVal){
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <ConvertPotADCtoFloat+0x1a>
 8001538:	f640 72ff 	movw	r2, #4095	; 0xfff
 800153c:	4293      	cmp	r3, r2
 800153e:	d004      	beq.n	800154a <ConvertPotADCtoFloat+0x22>
 8001540:	e006      	b.n	8001550 <ConvertPotADCtoFloat+0x28>
	case 0:
		result = 0.0;
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
		break;
 8001548:	e01e      	b.n	8001588 <ConvertPotADCtoFloat+0x60>
	case 4095:
		result = V_REF;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <ConvertPotADCtoFloat+0x80>)
 800154c:	60fb      	str	r3, [r7, #12]
		break;
 800154e:	e01b      	b.n	8001588 <ConvertPotADCtoFloat+0x60>
	default:
		result = V_REF*((*adcVal)/ADC_MAX);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fffd 	bl	8000554 <__aeabi_i2d>
 800155a:	a30f      	add	r3, pc, #60	; (adr r3, 8001598 <ConvertPotADCtoFloat+0x70>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f98c 	bl	800087c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	a30c      	add	r3, pc, #48	; (adr r3, 80015a0 <ConvertPotADCtoFloat+0x78>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f859 	bl	8000628 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb03 	bl	8000b88 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	60fb      	str	r3, [r7, #12]
		break;
 8001586:	bf00      	nop
	}
	return result;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	ee07 3a90 	vmov	s15, r3
}
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	00000000 	.word	0x00000000
 800159c:	40affe00 	.word	0x40affe00
 80015a0:	66666666 	.word	0x66666666
 80015a4:	400a6666 	.word	0x400a6666
 80015a8:	40533333 	.word	0x40533333

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_MspInit+0x4c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_MspInit+0x4c>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x4c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ea:	2007      	movs	r0, #7
 80015ec:	f001 f898 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800

080015fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	; 0x30
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_ADC_MspInit+0x130>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d116      	bne.n	800164c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_ADC_MspInit+0x134>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a42      	ldr	r2, [pc, #264]	; (8001730 <HAL_ADC_MspInit+0x134>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b40      	ldr	r3, [pc, #256]	; (8001730 <HAL_ADC_MspInit+0x134>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2012      	movs	r0, #18
 8001640:	f001 f879 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001644:	2012      	movs	r0, #18
 8001646:	f001 f892 	bl	800276e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800164a:	e06a      	b.n	8001722 <HAL_ADC_MspInit+0x126>
  else if(hadc->Instance==ADC2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_ADC_MspInit+0x138>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d130      	bne.n	80016b8 <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_ADC_MspInit+0x134>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a34      	ldr	r2, [pc, #208]	; (8001730 <HAL_ADC_MspInit+0x134>)
 8001660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_ADC_MspInit+0x134>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_ADC_MspInit+0x134>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <HAL_ADC_MspInit+0x134>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_ADC_MspInit+0x134>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = POT_Pin;
 800168e:	2301      	movs	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4825      	ldr	r0, [pc, #148]	; (8001738 <HAL_ADC_MspInit+0x13c>)
 80016a2:	f001 f87f 	bl	80027a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2012      	movs	r0, #18
 80016ac:	f001 f843 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016b0:	2012      	movs	r0, #18
 80016b2:	f001 f85c 	bl	800276e <HAL_NVIC_EnableIRQ>
}
 80016b6:	e034      	b.n	8001722 <HAL_ADC_MspInit+0x126>
  else if(hadc->Instance==ADC3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_ADC_MspInit+0x140>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12f      	bne.n	8001722 <HAL_ADC_MspInit+0x126>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_ADC_MspInit+0x134>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_ADC_MspInit+0x134>)
 80016cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_ADC_MspInit+0x134>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_ADC_MspInit+0x134>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <HAL_ADC_MspInit+0x134>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_ADC_MspInit+0x134>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = THERMISTOR_Pin;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(THERMISTOR_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <HAL_ADC_MspInit+0x13c>)
 800170e:	f001 f849 	bl	80027a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2012      	movs	r0, #18
 8001718:	f001 f80d 	bl	8002736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800171c:	2012      	movs	r0, #18
 800171e:	f001 f826 	bl	800276e <HAL_NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3730      	adds	r7, #48	; 0x30
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40012000 	.word	0x40012000
 8001730:	40023800 	.word	0x40023800
 8001734:	40012100 	.word	0x40012100
 8001738:	40020000 	.word	0x40020000
 800173c:	40012200 	.word	0x40012200

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <HAL_UART_MspInit+0x84>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x88>)
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_UART_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179a:	230c      	movs	r3, #12
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017aa:	2307      	movs	r3, #7
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_UART_MspInit+0x8c>)
 80017b6:	f000 fff5 	bl	80027a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint16_t* count;
	// if more than 0.5 seconds has passed
  if (*count > 499){
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <SysTick_Handler+0x34>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001826:	d308      	bcc.n	800183a <SysTick_Handler+0x22>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);		// toggle the LED
 8001828:	2120      	movs	r1, #32
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <SysTick_Handler+0x38>)
 800182c:	f001 f967 	bl	8002afe <HAL_GPIO_TogglePin>
	  *count = 0;										// reset count
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SysTick_Handler+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	801a      	strh	r2, [r3, #0]
 8001838:	e004      	b.n	8001844 <SysTick_Handler+0x2c>
  } else {
	  *count++; 	// increment count
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Handler+0x34>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3302      	adds	r3, #2
 8001840:	4a02      	ldr	r2, [pc, #8]	; (800184c <SysTick_Handler+0x34>)
 8001842:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 f9d8 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001ac 	.word	0x200001ac
 8001850:	40020000 	.word	0x40020000

08001854 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <ADC_IRQHandler+0x1c>)
 800185a:	f000 fb27 	bl	8001eac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <ADC_IRQHandler+0x20>)
 8001860:	f000 fb24 	bl	8001eac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <ADC_IRQHandler+0x24>)
 8001866:	f000 fb21 	bl	8001eac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000084 	.word	0x20000084
 8001874:	200000cc 	.word	0x200000cc
 8001878:	20000114 	.word	0x20000114

0800187c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e00a      	b.n	80018a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800188e:	f3af 8000 	nop.w
 8001892:	4601      	mov	r1, r0
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	60ba      	str	r2, [r7, #8]
 800189a:	b2ca      	uxtb	r2, r1
 800189c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf0      	blt.n	800188e <_read+0x12>
  }

  return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e009      	b.n	80018dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60ba      	str	r2, [r7, #8]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fde5 	bl	80014a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	dbf1      	blt.n	80018c8 <_write+0x12>
  }
  return len;
 80018e4:	687b      	ldr	r3, [r7, #4]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_close>:

int _close(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001916:	605a      	str	r2, [r3, #4]
  return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_isatty>:

int _isatty(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d207      	bcs.n	8001998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001988:	f002 fb22 	bl	8003fd0 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	220c      	movs	r2, #12
 8001990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20020000 	.word	0x20020000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	200001b0 	.word	0x200001b0
 80019c0:	20000308 	.word	0x20000308

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <SystemInit+0x20>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <SystemInit+0x20>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <convertAnalogToTemperature>:
 *  @param   The result of an ADC conversion (analogRead) in the range 0 to 4095
 *  @return  Temperature in °C
 */

float  convertAnalogToTemperature(uint16_t* analogReadValue)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  // If analogReadValue is 4095, we would otherwise cause a Divide-By-Zero,
  // Treat as crazy out-of-range temperature.
  if(*analogReadValue == 4095) return 1000.0;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <convertAnalogToTemperature+0x18>
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <convertAnalogToTemperature+0x110>)
 80019fe:	e059      	b.n	8001ab4 <convertAnalogToTemperature+0xcc>

  return (1/((log(((10000.0 * (*analogReadValue)) / (4095.0 - (*analogReadValue)))/95000.0)/3950.0) + (1 / (273.15 + 25.000)))) - 273.15;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fda5 	bl	8000554 <__aeabi_i2d>
 8001a0a:	a32f      	add	r3, pc, #188	; (adr r3, 8001ac8 <convertAnalogToTemperature+0xe0>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fe0a 	bl	8000628 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd97 	bl	8000554 <__aeabi_i2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	a129      	add	r1, pc, #164	; (adr r1, 8001ad0 <convertAnalogToTemperature+0xe8>)
 8001a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a30:	f7fe fc42 	bl	80002b8 <__aeabi_dsub>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7fe ff1e 	bl	800087c <__aeabi_ddiv>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	a323      	add	r3, pc, #140	; (adr r3, 8001ad8 <convertAnalogToTemperature+0xf0>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe ff15 	bl	800087c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	f003 f885 	bl	8004b70 <log>
 8001a66:	ec51 0b10 	vmov	r0, r1, d0
 8001a6a:	a31d      	add	r3, pc, #116	; (adr r3, 8001ae0 <convertAnalogToTemperature+0xf8>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe ff04 	bl	800087c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	a31a      	add	r3, pc, #104	; (adr r3, 8001ae8 <convertAnalogToTemperature+0x100>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fc1b 	bl	80002bc <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	f04f 0000 	mov.w	r0, #0
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <convertAnalogToTemperature+0x114>)
 8001a90:	f7fe fef4 	bl	800087c <__aeabi_ddiv>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	a314      	add	r3, pc, #80	; (adr r3, 8001af0 <convertAnalogToTemperature+0x108>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fc09 	bl	80002b8 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f86b 	bl	8000b88 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
}
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	40c38800 	.word	0x40c38800
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	40affe00 	.word	0x40affe00
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	40f73180 	.word	0x40f73180
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	40aedc00 	.word	0x40aedc00
 8001ae8:	dcb5db83 	.word	0xdcb5db83
 8001aec:	3f6b79e1 	.word	0x3f6b79e1
 8001af0:	66666666 	.word	0x66666666
 8001af4:	40711266 	.word	0x40711266
 8001af8:	447a0000 	.word	0x447a0000
 8001afc:	3ff00000 	.word	0x3ff00000

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ff4b 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f002 fa55 	bl	8003fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7ff fa67 	bl	8001004 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b44:	08005060 	.word	0x08005060
  ldr r2, =_sbss
 8001b48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b4c:	20000304 	.word	0x20000304

08001b50 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <CAN1_RX0_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 fdcf 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fd10 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fde7 	bl	800278a <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 fdaf 	bl	8002736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	20000004 	.word	0x20000004

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	; (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	200001b4 	.word	0x200001b4

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	200001b4 	.word	0x200001b4

08001c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff ffee 	bl	8001c20 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d005      	beq.n	8001c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_Delay+0x44>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c5e:	bf00      	nop
 8001c60:	f7ff ffde 	bl	8001c20 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d8f7      	bhi.n	8001c60 <HAL_Delay+0x28>
  {
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008

08001c80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e033      	b.n	8001cfe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fcac 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cc6:	f023 0302 	bic.w	r3, r3, #2
 8001cca:	f043 0202 	orr.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fb4e 	bl	8002374 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f023 0303 	bic.w	r3, r3, #3
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
 8001cee:	e001      	b.n	8001cf4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Start+0x1a>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e0b2      	b.n	8001e88 <HAL_ADC_Start+0x180>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d018      	beq.n	8001d6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <HAL_ADC_Start+0x18c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a52      	ldr	r2, [pc, #328]	; (8001e98 <HAL_ADC_Start+0x190>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0c9a      	lsrs	r2, r3, #18
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d17a      	bne.n	8001e6e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db6:	d106      	bne.n	8001dc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f023 0206 	bic.w	r2, r3, #6
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	645a      	str	r2, [r3, #68]	; 0x44
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd4:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <HAL_ADC_Start+0x194>)
 8001dd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001de0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d12a      	bne.n	8001e44 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <HAL_ADC_Start+0x198>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d015      	beq.n	8001e24 <HAL_ADC_Start+0x11c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_ADC_Start+0x19c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d105      	bne.n	8001e0e <HAL_ADC_Start+0x106>
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_ADC_Start+0x194>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <HAL_ADC_Start+0x1a0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d136      	bne.n	8001e86 <HAL_ADC_Start+0x17e>
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_ADC_Start+0x194>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d130      	bne.n	8001e86 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d129      	bne.n	8001e86 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	e020      	b.n	8001e86 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <HAL_ADC_Start+0x198>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d11b      	bne.n	8001e86 <HAL_ADC_Start+0x17e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d114      	bne.n	8001e86 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e00b      	b.n	8001e86 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	20000000 	.word	0x20000000
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	40012300 	.word	0x40012300
 8001ea0:	40012000 	.word	0x40012000
 8001ea4:	40012100 	.word	0x40012100
 8001ea8:	40012200 	.word	0x40012200

08001eac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d049      	beq.n	8001f76 <HAL_ADC_IRQHandler+0xca>
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d046      	beq.n	8001f76 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d12b      	bne.n	8001f66 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d127      	bne.n	8001f66 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d119      	bne.n	8001f66 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0220 	bic.w	r2, r2, #32
 8001f40:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff faa8 	bl	80014bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0212 	mvn.w	r2, #18
 8001f74:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d057      	beq.n	800203c <HAL_ADC_IRQHandler+0x190>
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d054      	beq.n	800203c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d139      	bne.n	800202c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d006      	beq.n	8001fd4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d12b      	bne.n	800202c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d124      	bne.n	800202c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11d      	bne.n	800202c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d119      	bne.n	800202c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002006:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f043 0201 	orr.w	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa9d 	bl	800256c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 020c 	mvn.w	r2, #12
 800203a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d017      	beq.n	8002082 <HAL_ADC_IRQHandler+0x1d6>
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d014      	beq.n	8002082 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10d      	bne.n	8002082 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f837 	bl	80020e6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0201 	mvn.w	r2, #1
 8002080:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002090:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x218>
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f043 0202 	orr.w	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f06f 0220 	mvn.w	r2, #32
 80020b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f820 	bl	80020fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0220 	mvn.w	r2, #32
 80020c2:	601a      	str	r2, [r3, #0]
  }
}
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x1c>
 8002128:	2302      	movs	r3, #2
 800212a:	e113      	b.n	8002354 <HAL_ADC_ConfigChannel+0x244>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d925      	bls.n	8002188 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68d9      	ldr	r1, [r3, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68d9      	ldr	r1, [r3, #12]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	4603      	mov	r3, r0
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4403      	add	r3, r0
 800217a:	3b1e      	subs	r3, #30
 800217c:	409a      	lsls	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	e022      	b.n	80021ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6919      	ldr	r1, [r3, #16]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	2207      	movs	r2, #7
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6919      	ldr	r1, [r3, #16]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4403      	add	r3, r0
 80021c4:	409a      	lsls	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d824      	bhi.n	8002220 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b05      	subs	r3, #5
 80021e8:	221f      	movs	r2, #31
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	400a      	ands	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b05      	subs	r3, #5
 8002212:	fa00 f203 	lsl.w	r2, r0, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
 800221e:	e04c      	b.n	80022ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d824      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b23      	subs	r3, #35	; 0x23
 800223a:	221f      	movs	r2, #31
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b23      	subs	r3, #35	; 0x23
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
 8002270:	e023      	b.n	80022ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3b41      	subs	r3, #65	; 0x41
 8002284:	221f      	movs	r2, #31
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4618      	mov	r0, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	3b41      	subs	r3, #65	; 0x41
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_ADC_ConfigChannel+0x250>)
 80022bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_ADC_ConfigChannel+0x254>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10f      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1d8>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b12      	cmp	r3, #18
 80022ce:	d10b      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_ADC_ConfigChannel+0x254>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d12b      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <HAL_ADC_ConfigChannel+0x258>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x1f4>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b11      	cmp	r3, #17
 8002302:	d122      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_ADC_ConfigChannel+0x258>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_ADC_ConfigChannel+0x25c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_ADC_ConfigChannel+0x260>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9a      	lsrs	r2, r3, #18
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800233c:	e002      	b.n	8002344 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3b01      	subs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40012300 	.word	0x40012300
 8002364:	40012000 	.word	0x40012000
 8002368:	10000012 	.word	0x10000012
 800236c:	20000000 	.word	0x20000000
 8002370:	431bde83 	.word	0x431bde83

08002374 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237c:	4b79      	ldr	r3, [pc, #484]	; (8002564 <ADC_Init+0x1f0>)
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	021a      	lsls	r2, r3, #8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	4a58      	ldr	r2, [pc, #352]	; (8002568 <ADC_Init+0x1f4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800241a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800243c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e00f      	b.n	8002472 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002470:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0202 	bic.w	r2, r2, #2
 8002480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e1b      	ldrb	r3, [r3, #24]
 800248c:	005a      	lsls	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	3b01      	subs	r3, #1
 80024cc:	035a      	lsls	r2, r3, #13
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e007      	b.n	80024e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	3b01      	subs	r3, #1
 8002504:	051a      	lsls	r2, r3, #20
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800251c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800252a:	025a      	lsls	r2, r3, #9
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	029a      	lsls	r2, r3, #10
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40012300 	.word	0x40012300
 8002568:	0f000001 	.word	0x0f000001

0800256c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <__NVIC_SetPriorityGrouping>:
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Config>:
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ec:	d301      	bcc.n	80026f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <SysTick_Config+0x40>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fa:	210f      	movs	r1, #15
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f7ff ff8e 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <SysTick_Config+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <SysTick_Config+0x40>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010

08002720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff29 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002748:	f7ff ff3e 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 800274c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	f7ff ff8e 	bl	8002674 <NVIC_EncodePriority>
 8002758:	4602      	mov	r2, r0
 800275a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff5d 	bl	8002620 <__NVIC_SetPriority>
}
 8002766:	bf00      	nop
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff31 	bl	80025e4 <__NVIC_EnableIRQ>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffa2 	bl	80026dc <SysTick_Config>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e165      	b.n	8002a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c0:	2201      	movs	r2, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	f040 8154 	bne.w	8002a86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d005      	beq.n	80027f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d130      	bne.n	8002858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800282c:	2201      	movs	r2, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 0201 	and.w	r2, r3, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b03      	cmp	r3, #3
 8002862:	d017      	beq.n	8002894 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d123      	bne.n	80028e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0203 	and.w	r2, r3, #3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80ae 	beq.w	8002a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	4a5c      	ldr	r2, [pc, #368]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 8002934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002938:	6453      	str	r3, [r2, #68]	; 0x44
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002946:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_GPIO_Init+0x304>)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4f      	ldr	r2, [pc, #316]	; (8002aac <HAL_GPIO_Init+0x308>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d025      	beq.n	80029be <HAL_GPIO_Init+0x21a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_GPIO_Init+0x30c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01f      	beq.n	80029ba <HAL_GPIO_Init+0x216>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_GPIO_Init+0x310>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d019      	beq.n	80029b6 <HAL_GPIO_Init+0x212>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4c      	ldr	r2, [pc, #304]	; (8002ab8 <HAL_GPIO_Init+0x314>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_GPIO_Init+0x20e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_GPIO_Init+0x318>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00d      	beq.n	80029ae <HAL_GPIO_Init+0x20a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_GPIO_Init+0x31c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x206>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a49      	ldr	r2, [pc, #292]	; (8002ac4 <HAL_GPIO_Init+0x320>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_GPIO_Init+0x202>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00c      	b.n	80029c0 <HAL_GPIO_Init+0x21c>
 80029a6:	2307      	movs	r3, #7
 80029a8:	e00a      	b.n	80029c0 <HAL_GPIO_Init+0x21c>
 80029aa:	2305      	movs	r3, #5
 80029ac:	e008      	b.n	80029c0 <HAL_GPIO_Init+0x21c>
 80029ae:	2304      	movs	r3, #4
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x21c>
 80029b2:	2303      	movs	r3, #3
 80029b4:	e004      	b.n	80029c0 <HAL_GPIO_Init+0x21c>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e002      	b.n	80029c0 <HAL_GPIO_Init+0x21c>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_GPIO_Init+0x21c>
 80029be:	2300      	movs	r3, #0
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4093      	lsls	r3, r2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d0:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <HAL_GPIO_Init+0x304>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029de:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a02:	4a31      	ldr	r2, [pc, #196]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a08:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a2c:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a32:	4b25      	ldr	r3, [pc, #148]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a56:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b0f      	cmp	r3, #15
 8002a90:	f67f ae96 	bls.w	80027c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40013800 	.word	0x40013800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40021800 	.word	0x40021800
 8002ac8:	40013c00 	.word	0x40013c00

08002acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae8:	e003      	b.n	8002af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	041a      	lsls	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b10:	887a      	ldrh	r2, [r7, #2]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	041a      	lsls	r2, r3, #16
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43d9      	mvns	r1, r3
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	400b      	ands	r3, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	619a      	str	r2, [r3, #24]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b60:	f7ff f85e 	bl	8001c20 <HAL_GetTick>
 8002b64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b66:	e009      	b.n	8002b7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b68:	f7ff f85a 	bl	8001c20 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b76:	d901      	bls.n	8002b7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e01f      	b.n	8002bbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x98>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b88:	d1ee      	bne.n	8002b68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b90:	f7ff f846 	bl	8001c20 <HAL_GetTick>
 8002b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b96:	e009      	b.n	8002bac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b98:	f7ff f842 	bl	8001c20 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba6:	d901      	bls.n	8002bac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e007      	b.n	8002bbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x98>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb8:	d1ee      	bne.n	8002b98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	420e0040 	.word	0x420e0040
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	420e0044 	.word	0x420e0044

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cc      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d90c      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e067      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4934      	ldr	r1, [pc, #208]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe ffac 	bl	8001c20 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe ffa8 	bl	8001c20 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d20c      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f855 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff0c 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	08005004 	.word	0x08005004
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000000 	.word	0x20000000

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a9b      	lsrs	r3, r3, #10
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08005014 	.word	0x08005014

08002de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de4:	f7ff ffdc 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0b5b      	lsrs	r3, r3, #13
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08005014 	.word	0x08005014

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0c:	b0ae      	sub	sp, #184	; 0xb8
 8002e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2e:	4bcb      	ldr	r3, [pc, #812]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	f200 8206 	bhi.w	8003248 <HAL_RCC_GetSysClockFreq+0x440>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08003249 	.word	0x08003249
 8002e4c:	08003249 	.word	0x08003249
 8002e50:	08003249 	.word	0x08003249
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08003249 	.word	0x08003249
 8002e5c:	08003249 	.word	0x08003249
 8002e60:	08003249 	.word	0x08003249
 8002e64:	08002e89 	.word	0x08002e89
 8002e68:	08003249 	.word	0x08003249
 8002e6c:	08003249 	.word	0x08003249
 8002e70:	08003249 	.word	0x08003249
 8002e74:	08003079 	.word	0x08003079
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4bb9      	ldr	r3, [pc, #740]	; (8003160 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e7e:	e1e7      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e80:	4bb8      	ldr	r3, [pc, #736]	; (8003164 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e86:	e1e3      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e88:	4bb4      	ldr	r3, [pc, #720]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e94:	4bb1      	ldr	r3, [pc, #708]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d071      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea0:	4bae      	ldr	r3, [pc, #696]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ec2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	0159      	lsls	r1, r3, #5
 8002ed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed8:	0150      	lsls	r0, r2, #5
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4621      	mov	r1, r4
 8002ee0:	1a51      	subs	r1, r2, r1
 8002ee2:	6439      	str	r1, [r7, #64]	; 0x40
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eea:	647b      	str	r3, [r7, #68]	; 0x44
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ef8:	4649      	mov	r1, r9
 8002efa:	018b      	lsls	r3, r1, #6
 8002efc:	4641      	mov	r1, r8
 8002efe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f02:	4641      	mov	r1, r8
 8002f04:	018a      	lsls	r2, r1, #6
 8002f06:	4641      	mov	r1, r8
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f20:	4649      	mov	r1, r9
 8002f22:	00cb      	lsls	r3, r1, #3
 8002f24:	4641      	mov	r1, r8
 8002f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	00ca      	lsls	r2, r1, #3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	4622      	mov	r2, r4
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3a:	462b      	mov	r3, r5
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	eb42 0303 	adc.w	r3, r2, r3
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f50:	4629      	mov	r1, r5
 8002f52:	024b      	lsls	r3, r1, #9
 8002f54:	4621      	mov	r1, r4
 8002f56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	024a      	lsls	r2, r1, #9
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f74:	f7fd fe58 	bl	8000c28 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f82:	e067      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f84:	4b75      	ldr	r3, [pc, #468]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f90:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fa2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	f04f 0000 	mov.w	r0, #0
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	0159      	lsls	r1, r3, #5
 8002fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb8:	0150      	lsls	r0, r2, #5
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	1a51      	subs	r1, r2, r1
 8002fc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fd8:	4649      	mov	r1, r9
 8002fda:	018b      	lsls	r3, r1, #6
 8002fdc:	4641      	mov	r1, r8
 8002fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe2:	4641      	mov	r1, r8
 8002fe4:	018a      	lsls	r2, r1, #6
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fec:	4649      	mov	r1, r9
 8002fee:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ffe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003006:	4692      	mov	sl, r2
 8003008:	469b      	mov	fp, r3
 800300a:	4623      	mov	r3, r4
 800300c:	eb1a 0303 	adds.w	r3, sl, r3
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	462b      	mov	r3, r5
 8003014:	eb4b 0303 	adc.w	r3, fp, r3
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003026:	4629      	mov	r1, r5
 8003028:	028b      	lsls	r3, r1, #10
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003030:	4621      	mov	r1, r4
 8003032:	028a      	lsls	r2, r1, #10
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800303c:	2200      	movs	r2, #0
 800303e:	673b      	str	r3, [r7, #112]	; 0x70
 8003040:	677a      	str	r2, [r7, #116]	; 0x74
 8003042:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003046:	f7fd fdef 	bl	8000c28 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4613      	mov	r3, r2
 8003050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	3301      	adds	r3, #1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800306a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003076:	e0eb      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003078:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003084:	4b35      	ldr	r3, [pc, #212]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d06b      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <HAL_RCC_GetSysClockFreq+0x354>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	2200      	movs	r2, #0
 8003098:	66bb      	str	r3, [r7, #104]	; 0x68
 800309a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800309c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800309e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a2:	663b      	str	r3, [r7, #96]	; 0x60
 80030a4:	2300      	movs	r3, #0
 80030a6:	667b      	str	r3, [r7, #100]	; 0x64
 80030a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030ac:	4622      	mov	r2, r4
 80030ae:	462b      	mov	r3, r5
 80030b0:	f04f 0000 	mov.w	r0, #0
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	0159      	lsls	r1, r3, #5
 80030ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030be:	0150      	lsls	r0, r2, #5
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4621      	mov	r1, r4
 80030c6:	1a51      	subs	r1, r2, r1
 80030c8:	61b9      	str	r1, [r7, #24]
 80030ca:	4629      	mov	r1, r5
 80030cc:	eb63 0301 	sbc.w	r3, r3, r1
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030de:	4659      	mov	r1, fp
 80030e0:	018b      	lsls	r3, r1, #6
 80030e2:	4651      	mov	r1, sl
 80030e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e8:	4651      	mov	r1, sl
 80030ea:	018a      	lsls	r2, r1, #6
 80030ec:	4651      	mov	r1, sl
 80030ee:	ebb2 0801 	subs.w	r8, r2, r1
 80030f2:	4659      	mov	r1, fp
 80030f4:	eb63 0901 	sbc.w	r9, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003104:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003108:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800310c:	4690      	mov	r8, r2
 800310e:	4699      	mov	r9, r3
 8003110:	4623      	mov	r3, r4
 8003112:	eb18 0303 	adds.w	r3, r8, r3
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	462b      	mov	r3, r5
 800311a:	eb49 0303 	adc.w	r3, r9, r3
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800312c:	4629      	mov	r1, r5
 800312e:	024b      	lsls	r3, r1, #9
 8003130:	4621      	mov	r1, r4
 8003132:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003136:	4621      	mov	r1, r4
 8003138:	024a      	lsls	r2, r1, #9
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003142:	2200      	movs	r2, #0
 8003144:	65bb      	str	r3, [r7, #88]	; 0x58
 8003146:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003148:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800314c:	f7fd fd6c 	bl	8000c28 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800315a:	e065      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x420>
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003168:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_GetSysClockFreq+0x458>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	2200      	movs	r2, #0
 8003170:	4618      	mov	r0, r3
 8003172:	4611      	mov	r1, r2
 8003174:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003178:	653b      	str	r3, [r7, #80]	; 0x50
 800317a:	2300      	movs	r3, #0
 800317c:	657b      	str	r3, [r7, #84]	; 0x54
 800317e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003182:	4642      	mov	r2, r8
 8003184:	464b      	mov	r3, r9
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003194:	0150      	lsls	r0, r2, #5
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4641      	mov	r1, r8
 800319c:	1a51      	subs	r1, r2, r1
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	4649      	mov	r1, r9
 80031a2:	eb63 0301 	sbc.w	r3, r3, r1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80031b4:	4659      	mov	r1, fp
 80031b6:	018b      	lsls	r3, r1, #6
 80031b8:	4651      	mov	r1, sl
 80031ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031be:	4651      	mov	r1, sl
 80031c0:	018a      	lsls	r2, r1, #6
 80031c2:	4651      	mov	r1, sl
 80031c4:	1a54      	subs	r4, r2, r1
 80031c6:	4659      	mov	r1, fp
 80031c8:	eb63 0501 	sbc.w	r5, r3, r1
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	00eb      	lsls	r3, r5, #3
 80031d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031da:	00e2      	lsls	r2, r4, #3
 80031dc:	4614      	mov	r4, r2
 80031de:	461d      	mov	r5, r3
 80031e0:	4643      	mov	r3, r8
 80031e2:	18e3      	adds	r3, r4, r3
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	464b      	mov	r3, r9
 80031e8:	eb45 0303 	adc.w	r3, r5, r3
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031fa:	4629      	mov	r1, r5
 80031fc:	028b      	lsls	r3, r1, #10
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003204:	4621      	mov	r1, r4
 8003206:	028a      	lsls	r2, r1, #10
 8003208:	4610      	mov	r0, r2
 800320a:	4619      	mov	r1, r3
 800320c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003210:	2200      	movs	r2, #0
 8003212:	64bb      	str	r3, [r7, #72]	; 0x48
 8003214:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003216:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800321a:	f7fd fd05 	bl	8000c28 <__aeabi_uldivmod>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4613      	mov	r3, r2
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <HAL_RCC_GetSysClockFreq+0x458>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0f1b      	lsrs	r3, r3, #28
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800323a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003246:	e003      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_GetSysClockFreq+0x45c>)
 800324a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800324e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003250:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003254:	4618      	mov	r0, r3
 8003256:	37b8      	adds	r7, #184	; 0xb8
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	00f42400 	.word	0x00f42400

08003268 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e28d      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8083 	beq.w	800338e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003288:	4b94      	ldr	r3, [pc, #592]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b04      	cmp	r3, #4
 8003292:	d019      	beq.n	80032c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003294:	4b91      	ldr	r3, [pc, #580]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800329c:	2b08      	cmp	r3, #8
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032a0:	4b8e      	ldr	r3, [pc, #568]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ac:	d00c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ae:	4b8b      	ldr	r3, [pc, #556]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d112      	bne.n	80032e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	4b84      	ldr	r3, [pc, #528]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x124>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d157      	bne.n	800338c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e25a      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x90>
 80032ea:	4b7c      	ldr	r3, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7b      	ldr	r2, [pc, #492]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xcc>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0xb4>
 8003302:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a72      	ldr	r2, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xcc>
 800331c:	4b6f      	ldr	r3, [pc, #444]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6e      	ldr	r2, [pc, #440]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b6c      	ldr	r3, [pc, #432]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a6b      	ldr	r2, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe fc70 	bl	8001c20 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe fc6c 	bl	8001c20 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e21f      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xdc>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fc5c 	bl	8001c20 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fc58 	bl	8001c20 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e20b      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x104>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06f      	beq.n	800347a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800339a:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d017      	beq.n	80033d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033a6:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d105      	bne.n	80033be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033b2:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b41      	ldr	r3, [pc, #260]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x186>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1d3      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCC_OscConfig+0x278>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fc05 	bl	8001c20 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe fc01 	bl	8001c20 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1b4      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4925      	ldr	r1, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x278>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fbe4 	bl	8001c20 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe fbe0 	bl	8001c20 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e193      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d036      	beq.n	80034f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_RCC_OscConfig+0x27c>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fbc4 	bl	8001c20 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fbc0 	bl	8001c20 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e173      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x274>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x234>
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_OscConfig+0x27c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fe fbad 	bl	8001c20 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00e      	b.n	80034e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe fba9 	bl	8001c20 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e15c      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470000 	.word	0x42470000
 80034e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b8a      	ldr	r3, [pc, #552]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b83      	ldr	r3, [pc, #524]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7f      	ldr	r3, [pc, #508]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a7e      	ldr	r2, [pc, #504]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b7c      	ldr	r3, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b79      	ldr	r3, [pc, #484]	; (8003718 <HAL_RCC_OscConfig+0x4b0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353e:	4b76      	ldr	r3, [pc, #472]	; (8003718 <HAL_RCC_OscConfig+0x4b0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a75      	ldr	r2, [pc, #468]	; (8003718 <HAL_RCC_OscConfig+0x4b0>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fe fb69 	bl	8001c20 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe fb65 	bl	8001c20 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e118      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b6c      	ldr	r3, [pc, #432]	; (8003718 <HAL_RCC_OscConfig+0x4b0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x31e>
 8003578:	4b66      	ldr	r3, [pc, #408]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a65      	ldr	r2, [pc, #404]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x358>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x340>
 800358e:	4b61      	ldr	r3, [pc, #388]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a60      	ldr	r2, [pc, #384]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	4b5e      	ldr	r3, [pc, #376]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a5d      	ldr	r2, [pc, #372]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x358>
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a59      	ldr	r2, [pc, #356]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	4b57      	ldr	r3, [pc, #348]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a56      	ldr	r2, [pc, #344]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe fb2a 	bl	8001c20 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe fb26 	bl	8001c20 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0d7      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b4b      	ldr	r3, [pc, #300]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x368>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fe fb14 	bl	8001c20 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe fb10 	bl	8001c20 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0c1      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80ad 	beq.w	8003794 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d060      	beq.n	8003708 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d145      	bne.n	80036da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_RCC_OscConfig+0x4b4>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe fae4 	bl	8001c20 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe fae0 	bl	8001c20 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e093      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b29      	ldr	r3, [pc, #164]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	071b      	lsls	r3, r3, #28
 80036a6:	491b      	ldr	r1, [pc, #108]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x4b4>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fe fab5 	bl	8001c20 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ba:	f7fe fab1 	bl	8001c20 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e064      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x452>
 80036d8:	e05c      	b.n	8003794 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_RCC_OscConfig+0x4b4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe fa9e 	bl	8001c20 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe fa9a 	bl	8001c20 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e04d      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x480>
 8003706:	e045      	b.n	8003794 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e040      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
 8003714:	40023800 	.word	0x40023800
 8003718:	40007000 	.word	0x40007000
 800371c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003720:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <HAL_RCC_OscConfig+0x538>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d030      	beq.n	8003790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d129      	bne.n	8003790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d122      	bne.n	8003790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003750:	4013      	ands	r3, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003758:	4293      	cmp	r3, r2
 800375a:	d119      	bne.n	8003790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	3b01      	subs	r3, #1
 800376a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d10f      	bne.n	8003790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d107      	bne.n	8003790 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800

080037a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e03f      	b.n	8003836 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd ffb8 	bl	8001740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	; 0x24
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f829 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800381c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003844:	b0c0      	sub	sp, #256	; 0x100
 8003846:	af00      	add	r7, sp, #0
 8003848:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	ea40 0301 	orr.w	r3, r0, r1
 8003868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	431a      	orrs	r2, r3
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003898:	f021 010c 	bic.w	r1, r1, #12
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038a6:	430b      	orrs	r3, r1
 80038a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	6999      	ldr	r1, [r3, #24]
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	ea40 0301 	orr.w	r3, r0, r1
 80038c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <UART_SetConfig+0x2cc>)
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d005      	beq.n	80038e0 <UART_SetConfig+0xa0>
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b8d      	ldr	r3, [pc, #564]	; (8003b10 <UART_SetConfig+0x2d0>)
 80038dc:	429a      	cmp	r2, r3
 80038de:	d104      	bne.n	80038ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e0:	f7ff fa7e 	bl	8002de0 <HAL_RCC_GetPCLK2Freq>
 80038e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038e8:	e003      	b.n	80038f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ea:	f7ff fa65 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 80038ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fc:	f040 810c 	bne.w	8003b18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003904:	2200      	movs	r2, #0
 8003906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800390a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800390e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	1891      	adds	r1, r2, r2
 8003918:	65b9      	str	r1, [r7, #88]	; 0x58
 800391a:	415b      	adcs	r3, r3
 800391c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003922:	4621      	mov	r1, r4
 8003924:	eb12 0801 	adds.w	r8, r2, r1
 8003928:	4629      	mov	r1, r5
 800392a:	eb43 0901 	adc.w	r9, r3, r1
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003942:	4690      	mov	r8, r2
 8003944:	4699      	mov	r9, r3
 8003946:	4623      	mov	r3, r4
 8003948:	eb18 0303 	adds.w	r3, r8, r3
 800394c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003950:	462b      	mov	r3, r5
 8003952:	eb49 0303 	adc.w	r3, r9, r3
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003966:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800396a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800396e:	460b      	mov	r3, r1
 8003970:	18db      	adds	r3, r3, r3
 8003972:	653b      	str	r3, [r7, #80]	; 0x50
 8003974:	4613      	mov	r3, r2
 8003976:	eb42 0303 	adc.w	r3, r2, r3
 800397a:	657b      	str	r3, [r7, #84]	; 0x54
 800397c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003984:	f7fd f950 	bl	8000c28 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b61      	ldr	r3, [pc, #388]	; (8003b14 <UART_SetConfig+0x2d4>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	011c      	lsls	r4, r3, #4
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80039b0:	415b      	adcs	r3, r3
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b8:	4641      	mov	r1, r8
 80039ba:	eb12 0a01 	adds.w	sl, r2, r1
 80039be:	4649      	mov	r1, r9
 80039c0:	eb43 0b01 	adc.w	fp, r3, r1
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d8:	4692      	mov	sl, r2
 80039da:	469b      	mov	fp, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	eb1a 0303 	adds.w	r3, sl, r3
 80039e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039e6:	464b      	mov	r3, r9
 80039e8:	eb4b 0303 	adc.w	r3, fp, r3
 80039ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a04:	460b      	mov	r3, r1
 8003a06:	18db      	adds	r3, r3, r3
 8003a08:	643b      	str	r3, [r7, #64]	; 0x40
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	eb42 0303 	adc.w	r3, r2, r3
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
 8003a12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a1a:	f7fd f905 	bl	8000c28 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003a26:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2264      	movs	r2, #100	; 0x64
 8003a2e:	fb02 f303 	mul.w	r3, r2, r3
 8003a32:	1acb      	subs	r3, r1, r3
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a3a:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003a3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a48:	441c      	add	r4, r3
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a64:	415b      	adcs	r3, r3
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6339      	str	r1, [r7, #48]	; 0x30
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	637b      	str	r3, [r7, #52]	; 0x34
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	eb42 0303 	adc.w	r3, r2, r3
 8003aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003abc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	eb42 0303 	adc.w	r3, r2, r3
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ad6:	f7fd f8a7 	bl	8000c28 <__aeabi_uldivmod>
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	2164      	movs	r1, #100	; 0x64
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	3332      	adds	r3, #50	; 0x32
 8003af2:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <UART_SetConfig+0x2d4>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	f003 0207 	and.w	r2, r3, #7
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4422      	add	r2, r4
 8003b06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b08:	e106      	b.n	8003d18 <UART_SetConfig+0x4d8>
 8003b0a:	bf00      	nop
 8003b0c:	40011000 	.word	0x40011000
 8003b10:	40011400 	.word	0x40011400
 8003b14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	6239      	str	r1, [r7, #32]
 8003b32:	415b      	adcs	r3, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	1854      	adds	r4, r2, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	eb43 0501 	adc.w	r5, r3, r1
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	00eb      	lsls	r3, r5, #3
 8003b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b52:	00e2      	lsls	r2, r4, #3
 8003b54:	4614      	mov	r4, r2
 8003b56:	461d      	mov	r5, r3
 8003b58:	4643      	mov	r3, r8
 8003b5a:	18e3      	adds	r3, r4, r3
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b60:	464b      	mov	r3, r9
 8003b62:	eb45 0303 	adc.w	r3, r5, r3
 8003b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b86:	4629      	mov	r1, r5
 8003b88:	008b      	lsls	r3, r1, #2
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b90:	4621      	mov	r1, r4
 8003b92:	008a      	lsls	r2, r1, #2
 8003b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b98:	f7fd f846 	bl	8000c28 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	011c      	lsls	r4, r3, #4
 8003baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bbc:	4642      	mov	r2, r8
 8003bbe:	464b      	mov	r3, r9
 8003bc0:	1891      	adds	r1, r2, r2
 8003bc2:	61b9      	str	r1, [r7, #24]
 8003bc4:	415b      	adcs	r3, r3
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bcc:	4641      	mov	r1, r8
 8003bce:	1851      	adds	r1, r2, r1
 8003bd0:	6139      	str	r1, [r7, #16]
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	414b      	adcs	r3, r1
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be4:	4659      	mov	r1, fp
 8003be6:	00cb      	lsls	r3, r1, #3
 8003be8:	4651      	mov	r1, sl
 8003bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bee:	4651      	mov	r1, sl
 8003bf0:	00ca      	lsls	r2, r1, #3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c00:	464b      	mov	r3, r9
 8003c02:	460a      	mov	r2, r1
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c24:	4649      	mov	r1, r9
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	4641      	mov	r1, r8
 8003c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2e:	4641      	mov	r1, r8
 8003c30:	008a      	lsls	r2, r1, #2
 8003c32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c36:	f7fc fff7 	bl	8000c28 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003c42:	fba3 2301 	umull	r2, r3, r3, r1
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2264      	movs	r2, #100	; 0x64
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
 8003c4e:	1acb      	subs	r3, r1, r3
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	3332      	adds	r3, #50	; 0x32
 8003c54:	4a33      	ldr	r2, [pc, #204]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c60:	441c      	add	r4, r3
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	673b      	str	r3, [r7, #112]	; 0x70
 8003c6a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c80:	4641      	mov	r1, r8
 8003c82:	1851      	adds	r1, r2, r1
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	4649      	mov	r1, r9
 8003c88:	414b      	adcs	r3, r1
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c98:	4659      	mov	r1, fp
 8003c9a:	00cb      	lsls	r3, r1, #3
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	00ca      	lsls	r2, r1, #3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	4642      	mov	r2, r8
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	eb42 0303 	adc.w	r3, r2, r3
 8003cba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc6:	667a      	str	r2, [r7, #100]	; 0x64
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	008b      	lsls	r3, r1, #2
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cde:	4641      	mov	r1, r8
 8003ce0:	008a      	lsls	r2, r1, #2
 8003ce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ce6:	f7fc ff9f 	bl	8000c28 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	2164      	movs	r1, #100	; 0x64
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	3332      	adds	r3, #50	; 0x32
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <UART_SetConfig+0x4e4>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4422      	add	r2, r4
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d24:	51eb851f 	.word	0x51eb851f

08003d28 <std>:
 8003d28:	2300      	movs	r3, #0
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d36:	6083      	str	r3, [r0, #8]
 8003d38:	8181      	strh	r1, [r0, #12]
 8003d3a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d3c:	81c2      	strh	r2, [r0, #14]
 8003d3e:	6183      	str	r3, [r0, #24]
 8003d40:	4619      	mov	r1, r3
 8003d42:	2208      	movs	r2, #8
 8003d44:	305c      	adds	r0, #92	; 0x5c
 8003d46:	f000 f8f4 	bl	8003f32 <memset>
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <std+0x38>)
 8003d4c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <std+0x3c>)
 8003d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <std+0x40>)
 8003d54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <std+0x44>)
 8003d58:	6224      	str	r4, [r4, #32]
 8003d5a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	bf00      	nop
 8003d60:	08003ead 	.word	0x08003ead
 8003d64:	08003ecf 	.word	0x08003ecf
 8003d68:	08003f07 	.word	0x08003f07
 8003d6c:	08003f2b 	.word	0x08003f2b

08003d70 <stdio_exit_handler>:
 8003d70:	4a02      	ldr	r2, [pc, #8]	; (8003d7c <stdio_exit_handler+0xc>)
 8003d72:	4903      	ldr	r1, [pc, #12]	; (8003d80 <stdio_exit_handler+0x10>)
 8003d74:	4803      	ldr	r0, [pc, #12]	; (8003d84 <stdio_exit_handler+0x14>)
 8003d76:	f000 b869 	b.w	8003e4c <_fwalk_sglue>
 8003d7a:	bf00      	nop
 8003d7c:	2000000c 	.word	0x2000000c
 8003d80:	080048cd 	.word	0x080048cd
 8003d84:	20000018 	.word	0x20000018

08003d88 <cleanup_stdio>:
 8003d88:	6841      	ldr	r1, [r0, #4]
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <cleanup_stdio+0x34>)
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	4604      	mov	r4, r0
 8003d92:	d001      	beq.n	8003d98 <cleanup_stdio+0x10>
 8003d94:	f000 fd9a 	bl	80048cc <_fflush_r>
 8003d98:	68a1      	ldr	r1, [r4, #8]
 8003d9a:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <cleanup_stdio+0x38>)
 8003d9c:	4299      	cmp	r1, r3
 8003d9e:	d002      	beq.n	8003da6 <cleanup_stdio+0x1e>
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 fd93 	bl	80048cc <_fflush_r>
 8003da6:	68e1      	ldr	r1, [r4, #12]
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <cleanup_stdio+0x3c>)
 8003daa:	4299      	cmp	r1, r3
 8003dac:	d004      	beq.n	8003db8 <cleanup_stdio+0x30>
 8003dae:	4620      	mov	r0, r4
 8003db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db4:	f000 bd8a 	b.w	80048cc <_fflush_r>
 8003db8:	bd10      	pop	{r4, pc}
 8003dba:	bf00      	nop
 8003dbc:	200001b8 	.word	0x200001b8
 8003dc0:	20000220 	.word	0x20000220
 8003dc4:	20000288 	.word	0x20000288

08003dc8 <global_stdio_init.part.0>:
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <global_stdio_init.part.0+0x30>)
 8003dcc:	4c0b      	ldr	r4, [pc, #44]	; (8003dfc <global_stdio_init.part.0+0x34>)
 8003dce:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <global_stdio_init.part.0+0x38>)
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	f7ff ffa6 	bl	8003d28 <std>
 8003ddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003de0:	2201      	movs	r2, #1
 8003de2:	2109      	movs	r1, #9
 8003de4:	f7ff ffa0 	bl	8003d28 <std>
 8003de8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003dec:	2202      	movs	r2, #2
 8003dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003df2:	2112      	movs	r1, #18
 8003df4:	f7ff bf98 	b.w	8003d28 <std>
 8003df8:	200002f0 	.word	0x200002f0
 8003dfc:	200001b8 	.word	0x200001b8
 8003e00:	08003d71 	.word	0x08003d71

08003e04 <__sfp_lock_acquire>:
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <__sfp_lock_acquire+0x8>)
 8003e06:	f000 b90d 	b.w	8004024 <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	200002f9 	.word	0x200002f9

08003e10 <__sfp_lock_release>:
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <__sfp_lock_release+0x8>)
 8003e12:	f000 b908 	b.w	8004026 <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	200002f9 	.word	0x200002f9

08003e1c <__sinit>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	4604      	mov	r4, r0
 8003e20:	f7ff fff0 	bl	8003e04 <__sfp_lock_acquire>
 8003e24:	6a23      	ldr	r3, [r4, #32]
 8003e26:	b11b      	cbz	r3, 8003e30 <__sinit+0x14>
 8003e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e2c:	f7ff bff0 	b.w	8003e10 <__sfp_lock_release>
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <__sinit+0x28>)
 8003e32:	6223      	str	r3, [r4, #32]
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <__sinit+0x2c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f5      	bne.n	8003e28 <__sinit+0xc>
 8003e3c:	f7ff ffc4 	bl	8003dc8 <global_stdio_init.part.0>
 8003e40:	e7f2      	b.n	8003e28 <__sinit+0xc>
 8003e42:	bf00      	nop
 8003e44:	08003d89 	.word	0x08003d89
 8003e48:	200002f0 	.word	0x200002f0

08003e4c <_fwalk_sglue>:
 8003e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e50:	4607      	mov	r7, r0
 8003e52:	4688      	mov	r8, r1
 8003e54:	4614      	mov	r4, r2
 8003e56:	2600      	movs	r6, #0
 8003e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8003e60:	d505      	bpl.n	8003e6e <_fwalk_sglue+0x22>
 8003e62:	6824      	ldr	r4, [r4, #0]
 8003e64:	2c00      	cmp	r4, #0
 8003e66:	d1f7      	bne.n	8003e58 <_fwalk_sglue+0xc>
 8003e68:	4630      	mov	r0, r6
 8003e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e6e:	89ab      	ldrh	r3, [r5, #12]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d907      	bls.n	8003e84 <_fwalk_sglue+0x38>
 8003e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	d003      	beq.n	8003e84 <_fwalk_sglue+0x38>
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	4638      	mov	r0, r7
 8003e80:	47c0      	blx	r8
 8003e82:	4306      	orrs	r6, r0
 8003e84:	3568      	adds	r5, #104	; 0x68
 8003e86:	e7e9      	b.n	8003e5c <_fwalk_sglue+0x10>

08003e88 <iprintf>:
 8003e88:	b40f      	push	{r0, r1, r2, r3}
 8003e8a:	b507      	push	{r0, r1, r2, lr}
 8003e8c:	4906      	ldr	r1, [pc, #24]	; (8003ea8 <iprintf+0x20>)
 8003e8e:	ab04      	add	r3, sp, #16
 8003e90:	6808      	ldr	r0, [r1, #0]
 8003e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e96:	6881      	ldr	r1, [r0, #8]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	f000 f9e7 	bl	800426c <_vfiprintf_r>
 8003e9e:	b003      	add	sp, #12
 8003ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ea4:	b004      	add	sp, #16
 8003ea6:	4770      	bx	lr
 8003ea8:	20000064 	.word	0x20000064

08003eac <__sread>:
 8003eac:	b510      	push	{r4, lr}
 8003eae:	460c      	mov	r4, r1
 8003eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb4:	f000 f868 	bl	8003f88 <_read_r>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bfab      	itete	ge
 8003ebc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ebe:	89a3      	ldrhlt	r3, [r4, #12]
 8003ec0:	181b      	addge	r3, r3, r0
 8003ec2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ec6:	bfac      	ite	ge
 8003ec8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eca:	81a3      	strhlt	r3, [r4, #12]
 8003ecc:	bd10      	pop	{r4, pc}

08003ece <__swrite>:
 8003ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	461f      	mov	r7, r3
 8003ed4:	898b      	ldrh	r3, [r1, #12]
 8003ed6:	05db      	lsls	r3, r3, #23
 8003ed8:	4605      	mov	r5, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	4616      	mov	r6, r2
 8003ede:	d505      	bpl.n	8003eec <__swrite+0x1e>
 8003ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f000 f83c 	bl	8003f64 <_lseek_r>
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ef2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	4632      	mov	r2, r6
 8003efa:	463b      	mov	r3, r7
 8003efc:	4628      	mov	r0, r5
 8003efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f02:	f000 b853 	b.w	8003fac <_write_r>

08003f06 <__sseek>:
 8003f06:	b510      	push	{r4, lr}
 8003f08:	460c      	mov	r4, r1
 8003f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0e:	f000 f829 	bl	8003f64 <_lseek_r>
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	bf15      	itete	ne
 8003f18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f22:	81a3      	strheq	r3, [r4, #12]
 8003f24:	bf18      	it	ne
 8003f26:	81a3      	strhne	r3, [r4, #12]
 8003f28:	bd10      	pop	{r4, pc}

08003f2a <__sclose>:
 8003f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2e:	f000 b809 	b.w	8003f44 <_close_r>

08003f32 <memset>:
 8003f32:	4402      	add	r2, r0
 8003f34:	4603      	mov	r3, r0
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d100      	bne.n	8003f3c <memset+0xa>
 8003f3a:	4770      	bx	lr
 8003f3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f40:	e7f9      	b.n	8003f36 <memset+0x4>
	...

08003f44 <_close_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d06      	ldr	r5, [pc, #24]	; (8003f60 <_close_r+0x1c>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	f7fd fccd 	bl	80018ee <_close>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_close_r+0x1a>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_close_r+0x1a>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	200002f4 	.word	0x200002f4

08003f64 <_lseek_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d07      	ldr	r5, [pc, #28]	; (8003f84 <_lseek_r+0x20>)
 8003f68:	4604      	mov	r4, r0
 8003f6a:	4608      	mov	r0, r1
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	602a      	str	r2, [r5, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fd fce2 	bl	800193c <_lseek>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_lseek_r+0x1e>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_lseek_r+0x1e>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	200002f4 	.word	0x200002f4

08003f88 <_read_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d07      	ldr	r5, [pc, #28]	; (8003fa8 <_read_r+0x20>)
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	4608      	mov	r0, r1
 8003f90:	4611      	mov	r1, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	602a      	str	r2, [r5, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fd fc70 	bl	800187c <_read>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_read_r+0x1e>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_read_r+0x1e>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	200002f4 	.word	0x200002f4

08003fac <_write_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d07      	ldr	r5, [pc, #28]	; (8003fcc <_write_r+0x20>)
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	602a      	str	r2, [r5, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fd fc7b 	bl	80018b6 <_write>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_write_r+0x1e>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_write_r+0x1e>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	200002f4 	.word	0x200002f4

08003fd0 <__errno>:
 8003fd0:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <__errno+0x8>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000064 	.word	0x20000064

08003fdc <__libc_init_array>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	4d0d      	ldr	r5, [pc, #52]	; (8004014 <__libc_init_array+0x38>)
 8003fe0:	4c0d      	ldr	r4, [pc, #52]	; (8004018 <__libc_init_array+0x3c>)
 8003fe2:	1b64      	subs	r4, r4, r5
 8003fe4:	10a4      	asrs	r4, r4, #2
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	42a6      	cmp	r6, r4
 8003fea:	d109      	bne.n	8004000 <__libc_init_array+0x24>
 8003fec:	4d0b      	ldr	r5, [pc, #44]	; (800401c <__libc_init_array+0x40>)
 8003fee:	4c0c      	ldr	r4, [pc, #48]	; (8004020 <__libc_init_array+0x44>)
 8003ff0:	f000 ffc0 	bl	8004f74 <_init>
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	2600      	movs	r6, #0
 8003ffa:	42a6      	cmp	r6, r4
 8003ffc:	d105      	bne.n	800400a <__libc_init_array+0x2e>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	f855 3b04 	ldr.w	r3, [r5], #4
 8004004:	4798      	blx	r3
 8004006:	3601      	adds	r6, #1
 8004008:	e7ee      	b.n	8003fe8 <__libc_init_array+0xc>
 800400a:	f855 3b04 	ldr.w	r3, [r5], #4
 800400e:	4798      	blx	r3
 8004010:	3601      	adds	r6, #1
 8004012:	e7f2      	b.n	8003ffa <__libc_init_array+0x1e>
 8004014:	08005058 	.word	0x08005058
 8004018:	08005058 	.word	0x08005058
 800401c:	08005058 	.word	0x08005058
 8004020:	0800505c 	.word	0x0800505c

08004024 <__retarget_lock_acquire_recursive>:
 8004024:	4770      	bx	lr

08004026 <__retarget_lock_release_recursive>:
 8004026:	4770      	bx	lr

08004028 <_free_r>:
 8004028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800402a:	2900      	cmp	r1, #0
 800402c:	d044      	beq.n	80040b8 <_free_r+0x90>
 800402e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004032:	9001      	str	r0, [sp, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f1a1 0404 	sub.w	r4, r1, #4
 800403a:	bfb8      	it	lt
 800403c:	18e4      	addlt	r4, r4, r3
 800403e:	f000 f8df 	bl	8004200 <__malloc_lock>
 8004042:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <_free_r+0x94>)
 8004044:	9801      	ldr	r0, [sp, #4]
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	b933      	cbnz	r3, 8004058 <_free_r+0x30>
 800404a:	6063      	str	r3, [r4, #4]
 800404c:	6014      	str	r4, [r2, #0]
 800404e:	b003      	add	sp, #12
 8004050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004054:	f000 b8da 	b.w	800420c <__malloc_unlock>
 8004058:	42a3      	cmp	r3, r4
 800405a:	d908      	bls.n	800406e <_free_r+0x46>
 800405c:	6825      	ldr	r5, [r4, #0]
 800405e:	1961      	adds	r1, r4, r5
 8004060:	428b      	cmp	r3, r1
 8004062:	bf01      	itttt	eq
 8004064:	6819      	ldreq	r1, [r3, #0]
 8004066:	685b      	ldreq	r3, [r3, #4]
 8004068:	1949      	addeq	r1, r1, r5
 800406a:	6021      	streq	r1, [r4, #0]
 800406c:	e7ed      	b.n	800404a <_free_r+0x22>
 800406e:	461a      	mov	r2, r3
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	b10b      	cbz	r3, 8004078 <_free_r+0x50>
 8004074:	42a3      	cmp	r3, r4
 8004076:	d9fa      	bls.n	800406e <_free_r+0x46>
 8004078:	6811      	ldr	r1, [r2, #0]
 800407a:	1855      	adds	r5, r2, r1
 800407c:	42a5      	cmp	r5, r4
 800407e:	d10b      	bne.n	8004098 <_free_r+0x70>
 8004080:	6824      	ldr	r4, [r4, #0]
 8004082:	4421      	add	r1, r4
 8004084:	1854      	adds	r4, r2, r1
 8004086:	42a3      	cmp	r3, r4
 8004088:	6011      	str	r1, [r2, #0]
 800408a:	d1e0      	bne.n	800404e <_free_r+0x26>
 800408c:	681c      	ldr	r4, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	6053      	str	r3, [r2, #4]
 8004092:	440c      	add	r4, r1
 8004094:	6014      	str	r4, [r2, #0]
 8004096:	e7da      	b.n	800404e <_free_r+0x26>
 8004098:	d902      	bls.n	80040a0 <_free_r+0x78>
 800409a:	230c      	movs	r3, #12
 800409c:	6003      	str	r3, [r0, #0]
 800409e:	e7d6      	b.n	800404e <_free_r+0x26>
 80040a0:	6825      	ldr	r5, [r4, #0]
 80040a2:	1961      	adds	r1, r4, r5
 80040a4:	428b      	cmp	r3, r1
 80040a6:	bf04      	itt	eq
 80040a8:	6819      	ldreq	r1, [r3, #0]
 80040aa:	685b      	ldreq	r3, [r3, #4]
 80040ac:	6063      	str	r3, [r4, #4]
 80040ae:	bf04      	itt	eq
 80040b0:	1949      	addeq	r1, r1, r5
 80040b2:	6021      	streq	r1, [r4, #0]
 80040b4:	6054      	str	r4, [r2, #4]
 80040b6:	e7ca      	b.n	800404e <_free_r+0x26>
 80040b8:	b003      	add	sp, #12
 80040ba:	bd30      	pop	{r4, r5, pc}
 80040bc:	200002fc 	.word	0x200002fc

080040c0 <sbrk_aligned>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4e0e      	ldr	r6, [pc, #56]	; (80040fc <sbrk_aligned+0x3c>)
 80040c4:	460c      	mov	r4, r1
 80040c6:	6831      	ldr	r1, [r6, #0]
 80040c8:	4605      	mov	r5, r0
 80040ca:	b911      	cbnz	r1, 80040d2 <sbrk_aligned+0x12>
 80040cc:	f000 fcbc 	bl	8004a48 <_sbrk_r>
 80040d0:	6030      	str	r0, [r6, #0]
 80040d2:	4621      	mov	r1, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 fcb7 	bl	8004a48 <_sbrk_r>
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	d00a      	beq.n	80040f4 <sbrk_aligned+0x34>
 80040de:	1cc4      	adds	r4, r0, #3
 80040e0:	f024 0403 	bic.w	r4, r4, #3
 80040e4:	42a0      	cmp	r0, r4
 80040e6:	d007      	beq.n	80040f8 <sbrk_aligned+0x38>
 80040e8:	1a21      	subs	r1, r4, r0
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 fcac 	bl	8004a48 <_sbrk_r>
 80040f0:	3001      	adds	r0, #1
 80040f2:	d101      	bne.n	80040f8 <sbrk_aligned+0x38>
 80040f4:	f04f 34ff 	mov.w	r4, #4294967295
 80040f8:	4620      	mov	r0, r4
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	20000300 	.word	0x20000300

08004100 <_malloc_r>:
 8004100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004104:	1ccd      	adds	r5, r1, #3
 8004106:	f025 0503 	bic.w	r5, r5, #3
 800410a:	3508      	adds	r5, #8
 800410c:	2d0c      	cmp	r5, #12
 800410e:	bf38      	it	cc
 8004110:	250c      	movcc	r5, #12
 8004112:	2d00      	cmp	r5, #0
 8004114:	4607      	mov	r7, r0
 8004116:	db01      	blt.n	800411c <_malloc_r+0x1c>
 8004118:	42a9      	cmp	r1, r5
 800411a:	d905      	bls.n	8004128 <_malloc_r+0x28>
 800411c:	230c      	movs	r3, #12
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	2600      	movs	r6, #0
 8004122:	4630      	mov	r0, r6
 8004124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004128:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041fc <_malloc_r+0xfc>
 800412c:	f000 f868 	bl	8004200 <__malloc_lock>
 8004130:	f8d8 3000 	ldr.w	r3, [r8]
 8004134:	461c      	mov	r4, r3
 8004136:	bb5c      	cbnz	r4, 8004190 <_malloc_r+0x90>
 8004138:	4629      	mov	r1, r5
 800413a:	4638      	mov	r0, r7
 800413c:	f7ff ffc0 	bl	80040c0 <sbrk_aligned>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	4604      	mov	r4, r0
 8004144:	d155      	bne.n	80041f2 <_malloc_r+0xf2>
 8004146:	f8d8 4000 	ldr.w	r4, [r8]
 800414a:	4626      	mov	r6, r4
 800414c:	2e00      	cmp	r6, #0
 800414e:	d145      	bne.n	80041dc <_malloc_r+0xdc>
 8004150:	2c00      	cmp	r4, #0
 8004152:	d048      	beq.n	80041e6 <_malloc_r+0xe6>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	4631      	mov	r1, r6
 8004158:	4638      	mov	r0, r7
 800415a:	eb04 0903 	add.w	r9, r4, r3
 800415e:	f000 fc73 	bl	8004a48 <_sbrk_r>
 8004162:	4581      	cmp	r9, r0
 8004164:	d13f      	bne.n	80041e6 <_malloc_r+0xe6>
 8004166:	6821      	ldr	r1, [r4, #0]
 8004168:	1a6d      	subs	r5, r5, r1
 800416a:	4629      	mov	r1, r5
 800416c:	4638      	mov	r0, r7
 800416e:	f7ff ffa7 	bl	80040c0 <sbrk_aligned>
 8004172:	3001      	adds	r0, #1
 8004174:	d037      	beq.n	80041e6 <_malloc_r+0xe6>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	442b      	add	r3, r5
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	f8d8 3000 	ldr.w	r3, [r8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d038      	beq.n	80041f6 <_malloc_r+0xf6>
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	42a2      	cmp	r2, r4
 8004188:	d12b      	bne.n	80041e2 <_malloc_r+0xe2>
 800418a:	2200      	movs	r2, #0
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	e00f      	b.n	80041b0 <_malloc_r+0xb0>
 8004190:	6822      	ldr	r2, [r4, #0]
 8004192:	1b52      	subs	r2, r2, r5
 8004194:	d41f      	bmi.n	80041d6 <_malloc_r+0xd6>
 8004196:	2a0b      	cmp	r2, #11
 8004198:	d917      	bls.n	80041ca <_malloc_r+0xca>
 800419a:	1961      	adds	r1, r4, r5
 800419c:	42a3      	cmp	r3, r4
 800419e:	6025      	str	r5, [r4, #0]
 80041a0:	bf18      	it	ne
 80041a2:	6059      	strne	r1, [r3, #4]
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	bf08      	it	eq
 80041a8:	f8c8 1000 	streq.w	r1, [r8]
 80041ac:	5162      	str	r2, [r4, r5]
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	4638      	mov	r0, r7
 80041b2:	f104 060b 	add.w	r6, r4, #11
 80041b6:	f000 f829 	bl	800420c <__malloc_unlock>
 80041ba:	f026 0607 	bic.w	r6, r6, #7
 80041be:	1d23      	adds	r3, r4, #4
 80041c0:	1af2      	subs	r2, r6, r3
 80041c2:	d0ae      	beq.n	8004122 <_malloc_r+0x22>
 80041c4:	1b9b      	subs	r3, r3, r6
 80041c6:	50a3      	str	r3, [r4, r2]
 80041c8:	e7ab      	b.n	8004122 <_malloc_r+0x22>
 80041ca:	42a3      	cmp	r3, r4
 80041cc:	6862      	ldr	r2, [r4, #4]
 80041ce:	d1dd      	bne.n	800418c <_malloc_r+0x8c>
 80041d0:	f8c8 2000 	str.w	r2, [r8]
 80041d4:	e7ec      	b.n	80041b0 <_malloc_r+0xb0>
 80041d6:	4623      	mov	r3, r4
 80041d8:	6864      	ldr	r4, [r4, #4]
 80041da:	e7ac      	b.n	8004136 <_malloc_r+0x36>
 80041dc:	4634      	mov	r4, r6
 80041de:	6876      	ldr	r6, [r6, #4]
 80041e0:	e7b4      	b.n	800414c <_malloc_r+0x4c>
 80041e2:	4613      	mov	r3, r2
 80041e4:	e7cc      	b.n	8004180 <_malloc_r+0x80>
 80041e6:	230c      	movs	r3, #12
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	4638      	mov	r0, r7
 80041ec:	f000 f80e 	bl	800420c <__malloc_unlock>
 80041f0:	e797      	b.n	8004122 <_malloc_r+0x22>
 80041f2:	6025      	str	r5, [r4, #0]
 80041f4:	e7dc      	b.n	80041b0 <_malloc_r+0xb0>
 80041f6:	605b      	str	r3, [r3, #4]
 80041f8:	deff      	udf	#255	; 0xff
 80041fa:	bf00      	nop
 80041fc:	200002fc 	.word	0x200002fc

08004200 <__malloc_lock>:
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <__malloc_lock+0x8>)
 8004202:	f7ff bf0f 	b.w	8004024 <__retarget_lock_acquire_recursive>
 8004206:	bf00      	nop
 8004208:	200002f8 	.word	0x200002f8

0800420c <__malloc_unlock>:
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <__malloc_unlock+0x8>)
 800420e:	f7ff bf0a 	b.w	8004026 <__retarget_lock_release_recursive>
 8004212:	bf00      	nop
 8004214:	200002f8 	.word	0x200002f8

08004218 <__sfputc_r>:
 8004218:	6893      	ldr	r3, [r2, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	b410      	push	{r4}
 8004220:	6093      	str	r3, [r2, #8]
 8004222:	da08      	bge.n	8004236 <__sfputc_r+0x1e>
 8004224:	6994      	ldr	r4, [r2, #24]
 8004226:	42a3      	cmp	r3, r4
 8004228:	db01      	blt.n	800422e <__sfputc_r+0x16>
 800422a:	290a      	cmp	r1, #10
 800422c:	d103      	bne.n	8004236 <__sfputc_r+0x1e>
 800422e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004232:	f000 bb73 	b.w	800491c <__swbuf_r>
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	1c58      	adds	r0, r3, #1
 800423a:	6010      	str	r0, [r2, #0]
 800423c:	7019      	strb	r1, [r3, #0]
 800423e:	4608      	mov	r0, r1
 8004240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004244:	4770      	bx	lr

08004246 <__sfputs_r>:
 8004246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004248:	4606      	mov	r6, r0
 800424a:	460f      	mov	r7, r1
 800424c:	4614      	mov	r4, r2
 800424e:	18d5      	adds	r5, r2, r3
 8004250:	42ac      	cmp	r4, r5
 8004252:	d101      	bne.n	8004258 <__sfputs_r+0x12>
 8004254:	2000      	movs	r0, #0
 8004256:	e007      	b.n	8004268 <__sfputs_r+0x22>
 8004258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800425c:	463a      	mov	r2, r7
 800425e:	4630      	mov	r0, r6
 8004260:	f7ff ffda 	bl	8004218 <__sfputc_r>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d1f3      	bne.n	8004250 <__sfputs_r+0xa>
 8004268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800426c <_vfiprintf_r>:
 800426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004270:	460d      	mov	r5, r1
 8004272:	b09d      	sub	sp, #116	; 0x74
 8004274:	4614      	mov	r4, r2
 8004276:	4698      	mov	r8, r3
 8004278:	4606      	mov	r6, r0
 800427a:	b118      	cbz	r0, 8004284 <_vfiprintf_r+0x18>
 800427c:	6a03      	ldr	r3, [r0, #32]
 800427e:	b90b      	cbnz	r3, 8004284 <_vfiprintf_r+0x18>
 8004280:	f7ff fdcc 	bl	8003e1c <__sinit>
 8004284:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004286:	07d9      	lsls	r1, r3, #31
 8004288:	d405      	bmi.n	8004296 <_vfiprintf_r+0x2a>
 800428a:	89ab      	ldrh	r3, [r5, #12]
 800428c:	059a      	lsls	r2, r3, #22
 800428e:	d402      	bmi.n	8004296 <_vfiprintf_r+0x2a>
 8004290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004292:	f7ff fec7 	bl	8004024 <__retarget_lock_acquire_recursive>
 8004296:	89ab      	ldrh	r3, [r5, #12]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	d501      	bpl.n	80042a0 <_vfiprintf_r+0x34>
 800429c:	692b      	ldr	r3, [r5, #16]
 800429e:	b99b      	cbnz	r3, 80042c8 <_vfiprintf_r+0x5c>
 80042a0:	4629      	mov	r1, r5
 80042a2:	4630      	mov	r0, r6
 80042a4:	f000 fb78 	bl	8004998 <__swsetup_r>
 80042a8:	b170      	cbz	r0, 80042c8 <_vfiprintf_r+0x5c>
 80042aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042ac:	07dc      	lsls	r4, r3, #31
 80042ae:	d504      	bpl.n	80042ba <_vfiprintf_r+0x4e>
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	b01d      	add	sp, #116	; 0x74
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	89ab      	ldrh	r3, [r5, #12]
 80042bc:	0598      	lsls	r0, r3, #22
 80042be:	d4f7      	bmi.n	80042b0 <_vfiprintf_r+0x44>
 80042c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042c2:	f7ff feb0 	bl	8004026 <__retarget_lock_release_recursive>
 80042c6:	e7f3      	b.n	80042b0 <_vfiprintf_r+0x44>
 80042c8:	2300      	movs	r3, #0
 80042ca:	9309      	str	r3, [sp, #36]	; 0x24
 80042cc:	2320      	movs	r3, #32
 80042ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042d6:	2330      	movs	r3, #48	; 0x30
 80042d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800448c <_vfiprintf_r+0x220>
 80042dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042e0:	f04f 0901 	mov.w	r9, #1
 80042e4:	4623      	mov	r3, r4
 80042e6:	469a      	mov	sl, r3
 80042e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ec:	b10a      	cbz	r2, 80042f2 <_vfiprintf_r+0x86>
 80042ee:	2a25      	cmp	r2, #37	; 0x25
 80042f0:	d1f9      	bne.n	80042e6 <_vfiprintf_r+0x7a>
 80042f2:	ebba 0b04 	subs.w	fp, sl, r4
 80042f6:	d00b      	beq.n	8004310 <_vfiprintf_r+0xa4>
 80042f8:	465b      	mov	r3, fp
 80042fa:	4622      	mov	r2, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	4630      	mov	r0, r6
 8004300:	f7ff ffa1 	bl	8004246 <__sfputs_r>
 8004304:	3001      	adds	r0, #1
 8004306:	f000 80a9 	beq.w	800445c <_vfiprintf_r+0x1f0>
 800430a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800430c:	445a      	add	r2, fp
 800430e:	9209      	str	r2, [sp, #36]	; 0x24
 8004310:	f89a 3000 	ldrb.w	r3, [sl]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a1 	beq.w	800445c <_vfiprintf_r+0x1f0>
 800431a:	2300      	movs	r3, #0
 800431c:	f04f 32ff 	mov.w	r2, #4294967295
 8004320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004324:	f10a 0a01 	add.w	sl, sl, #1
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	9307      	str	r3, [sp, #28]
 800432c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004330:	931a      	str	r3, [sp, #104]	; 0x68
 8004332:	4654      	mov	r4, sl
 8004334:	2205      	movs	r2, #5
 8004336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433a:	4854      	ldr	r0, [pc, #336]	; (800448c <_vfiprintf_r+0x220>)
 800433c:	f7fb ff68 	bl	8000210 <memchr>
 8004340:	9a04      	ldr	r2, [sp, #16]
 8004342:	b9d8      	cbnz	r0, 800437c <_vfiprintf_r+0x110>
 8004344:	06d1      	lsls	r1, r2, #27
 8004346:	bf44      	itt	mi
 8004348:	2320      	movmi	r3, #32
 800434a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800434e:	0713      	lsls	r3, r2, #28
 8004350:	bf44      	itt	mi
 8004352:	232b      	movmi	r3, #43	; 0x2b
 8004354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004358:	f89a 3000 	ldrb.w	r3, [sl]
 800435c:	2b2a      	cmp	r3, #42	; 0x2a
 800435e:	d015      	beq.n	800438c <_vfiprintf_r+0x120>
 8004360:	9a07      	ldr	r2, [sp, #28]
 8004362:	4654      	mov	r4, sl
 8004364:	2000      	movs	r0, #0
 8004366:	f04f 0c0a 	mov.w	ip, #10
 800436a:	4621      	mov	r1, r4
 800436c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004370:	3b30      	subs	r3, #48	; 0x30
 8004372:	2b09      	cmp	r3, #9
 8004374:	d94d      	bls.n	8004412 <_vfiprintf_r+0x1a6>
 8004376:	b1b0      	cbz	r0, 80043a6 <_vfiprintf_r+0x13a>
 8004378:	9207      	str	r2, [sp, #28]
 800437a:	e014      	b.n	80043a6 <_vfiprintf_r+0x13a>
 800437c:	eba0 0308 	sub.w	r3, r0, r8
 8004380:	fa09 f303 	lsl.w	r3, r9, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	9304      	str	r3, [sp, #16]
 8004388:	46a2      	mov	sl, r4
 800438a:	e7d2      	b.n	8004332 <_vfiprintf_r+0xc6>
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	1d19      	adds	r1, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	9103      	str	r1, [sp, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	bfbb      	ittet	lt
 8004398:	425b      	neglt	r3, r3
 800439a:	f042 0202 	orrlt.w	r2, r2, #2
 800439e:	9307      	strge	r3, [sp, #28]
 80043a0:	9307      	strlt	r3, [sp, #28]
 80043a2:	bfb8      	it	lt
 80043a4:	9204      	strlt	r2, [sp, #16]
 80043a6:	7823      	ldrb	r3, [r4, #0]
 80043a8:	2b2e      	cmp	r3, #46	; 0x2e
 80043aa:	d10c      	bne.n	80043c6 <_vfiprintf_r+0x15a>
 80043ac:	7863      	ldrb	r3, [r4, #1]
 80043ae:	2b2a      	cmp	r3, #42	; 0x2a
 80043b0:	d134      	bne.n	800441c <_vfiprintf_r+0x1b0>
 80043b2:	9b03      	ldr	r3, [sp, #12]
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	9203      	str	r2, [sp, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bfb8      	it	lt
 80043be:	f04f 33ff 	movlt.w	r3, #4294967295
 80043c2:	3402      	adds	r4, #2
 80043c4:	9305      	str	r3, [sp, #20]
 80043c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800449c <_vfiprintf_r+0x230>
 80043ca:	7821      	ldrb	r1, [r4, #0]
 80043cc:	2203      	movs	r2, #3
 80043ce:	4650      	mov	r0, sl
 80043d0:	f7fb ff1e 	bl	8000210 <memchr>
 80043d4:	b138      	cbz	r0, 80043e6 <_vfiprintf_r+0x17a>
 80043d6:	9b04      	ldr	r3, [sp, #16]
 80043d8:	eba0 000a 	sub.w	r0, r0, sl
 80043dc:	2240      	movs	r2, #64	; 0x40
 80043de:	4082      	lsls	r2, r0
 80043e0:	4313      	orrs	r3, r2
 80043e2:	3401      	adds	r4, #1
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ea:	4829      	ldr	r0, [pc, #164]	; (8004490 <_vfiprintf_r+0x224>)
 80043ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043f0:	2206      	movs	r2, #6
 80043f2:	f7fb ff0d 	bl	8000210 <memchr>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d03f      	beq.n	800447a <_vfiprintf_r+0x20e>
 80043fa:	4b26      	ldr	r3, [pc, #152]	; (8004494 <_vfiprintf_r+0x228>)
 80043fc:	bb1b      	cbnz	r3, 8004446 <_vfiprintf_r+0x1da>
 80043fe:	9b03      	ldr	r3, [sp, #12]
 8004400:	3307      	adds	r3, #7
 8004402:	f023 0307 	bic.w	r3, r3, #7
 8004406:	3308      	adds	r3, #8
 8004408:	9303      	str	r3, [sp, #12]
 800440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800440c:	443b      	add	r3, r7
 800440e:	9309      	str	r3, [sp, #36]	; 0x24
 8004410:	e768      	b.n	80042e4 <_vfiprintf_r+0x78>
 8004412:	fb0c 3202 	mla	r2, ip, r2, r3
 8004416:	460c      	mov	r4, r1
 8004418:	2001      	movs	r0, #1
 800441a:	e7a6      	b.n	800436a <_vfiprintf_r+0xfe>
 800441c:	2300      	movs	r3, #0
 800441e:	3401      	adds	r4, #1
 8004420:	9305      	str	r3, [sp, #20]
 8004422:	4619      	mov	r1, r3
 8004424:	f04f 0c0a 	mov.w	ip, #10
 8004428:	4620      	mov	r0, r4
 800442a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800442e:	3a30      	subs	r2, #48	; 0x30
 8004430:	2a09      	cmp	r2, #9
 8004432:	d903      	bls.n	800443c <_vfiprintf_r+0x1d0>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0c6      	beq.n	80043c6 <_vfiprintf_r+0x15a>
 8004438:	9105      	str	r1, [sp, #20]
 800443a:	e7c4      	b.n	80043c6 <_vfiprintf_r+0x15a>
 800443c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004440:	4604      	mov	r4, r0
 8004442:	2301      	movs	r3, #1
 8004444:	e7f0      	b.n	8004428 <_vfiprintf_r+0x1bc>
 8004446:	ab03      	add	r3, sp, #12
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	462a      	mov	r2, r5
 800444c:	4b12      	ldr	r3, [pc, #72]	; (8004498 <_vfiprintf_r+0x22c>)
 800444e:	a904      	add	r1, sp, #16
 8004450:	4630      	mov	r0, r6
 8004452:	f3af 8000 	nop.w
 8004456:	4607      	mov	r7, r0
 8004458:	1c78      	adds	r0, r7, #1
 800445a:	d1d6      	bne.n	800440a <_vfiprintf_r+0x19e>
 800445c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800445e:	07d9      	lsls	r1, r3, #31
 8004460:	d405      	bmi.n	800446e <_vfiprintf_r+0x202>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	059a      	lsls	r2, r3, #22
 8004466:	d402      	bmi.n	800446e <_vfiprintf_r+0x202>
 8004468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800446a:	f7ff fddc 	bl	8004026 <__retarget_lock_release_recursive>
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	065b      	lsls	r3, r3, #25
 8004472:	f53f af1d 	bmi.w	80042b0 <_vfiprintf_r+0x44>
 8004476:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004478:	e71c      	b.n	80042b4 <_vfiprintf_r+0x48>
 800447a:	ab03      	add	r3, sp, #12
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	462a      	mov	r2, r5
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <_vfiprintf_r+0x22c>)
 8004482:	a904      	add	r1, sp, #16
 8004484:	4630      	mov	r0, r6
 8004486:	f000 f879 	bl	800457c <_printf_i>
 800448a:	e7e4      	b.n	8004456 <_vfiprintf_r+0x1ea>
 800448c:	0800501c 	.word	0x0800501c
 8004490:	08005026 	.word	0x08005026
 8004494:	00000000 	.word	0x00000000
 8004498:	08004247 	.word	0x08004247
 800449c:	08005022 	.word	0x08005022

080044a0 <_printf_common>:
 80044a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	4616      	mov	r6, r2
 80044a6:	4699      	mov	r9, r3
 80044a8:	688a      	ldr	r2, [r1, #8]
 80044aa:	690b      	ldr	r3, [r1, #16]
 80044ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bfb8      	it	lt
 80044b4:	4613      	movlt	r3, r2
 80044b6:	6033      	str	r3, [r6, #0]
 80044b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044bc:	4607      	mov	r7, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	b10a      	cbz	r2, 80044c6 <_printf_common+0x26>
 80044c2:	3301      	adds	r3, #1
 80044c4:	6033      	str	r3, [r6, #0]
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	0699      	lsls	r1, r3, #26
 80044ca:	bf42      	ittt	mi
 80044cc:	6833      	ldrmi	r3, [r6, #0]
 80044ce:	3302      	addmi	r3, #2
 80044d0:	6033      	strmi	r3, [r6, #0]
 80044d2:	6825      	ldr	r5, [r4, #0]
 80044d4:	f015 0506 	ands.w	r5, r5, #6
 80044d8:	d106      	bne.n	80044e8 <_printf_common+0x48>
 80044da:	f104 0a19 	add.w	sl, r4, #25
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	6832      	ldr	r2, [r6, #0]
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	42ab      	cmp	r3, r5
 80044e6:	dc26      	bgt.n	8004536 <_printf_common+0x96>
 80044e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044ec:	1e13      	subs	r3, r2, #0
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	bf18      	it	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	0692      	lsls	r2, r2, #26
 80044f6:	d42b      	bmi.n	8004550 <_printf_common+0xb0>
 80044f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044fc:	4649      	mov	r1, r9
 80044fe:	4638      	mov	r0, r7
 8004500:	47c0      	blx	r8
 8004502:	3001      	adds	r0, #1
 8004504:	d01e      	beq.n	8004544 <_printf_common+0xa4>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	6922      	ldr	r2, [r4, #16]
 800450a:	f003 0306 	and.w	r3, r3, #6
 800450e:	2b04      	cmp	r3, #4
 8004510:	bf02      	ittt	eq
 8004512:	68e5      	ldreq	r5, [r4, #12]
 8004514:	6833      	ldreq	r3, [r6, #0]
 8004516:	1aed      	subeq	r5, r5, r3
 8004518:	68a3      	ldr	r3, [r4, #8]
 800451a:	bf0c      	ite	eq
 800451c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004520:	2500      	movne	r5, #0
 8004522:	4293      	cmp	r3, r2
 8004524:	bfc4      	itt	gt
 8004526:	1a9b      	subgt	r3, r3, r2
 8004528:	18ed      	addgt	r5, r5, r3
 800452a:	2600      	movs	r6, #0
 800452c:	341a      	adds	r4, #26
 800452e:	42b5      	cmp	r5, r6
 8004530:	d11a      	bne.n	8004568 <_printf_common+0xc8>
 8004532:	2000      	movs	r0, #0
 8004534:	e008      	b.n	8004548 <_printf_common+0xa8>
 8004536:	2301      	movs	r3, #1
 8004538:	4652      	mov	r2, sl
 800453a:	4649      	mov	r1, r9
 800453c:	4638      	mov	r0, r7
 800453e:	47c0      	blx	r8
 8004540:	3001      	adds	r0, #1
 8004542:	d103      	bne.n	800454c <_printf_common+0xac>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	3501      	adds	r5, #1
 800454e:	e7c6      	b.n	80044de <_printf_common+0x3e>
 8004550:	18e1      	adds	r1, r4, r3
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	2030      	movs	r0, #48	; 0x30
 8004556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800455a:	4422      	add	r2, r4
 800455c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004564:	3302      	adds	r3, #2
 8004566:	e7c7      	b.n	80044f8 <_printf_common+0x58>
 8004568:	2301      	movs	r3, #1
 800456a:	4622      	mov	r2, r4
 800456c:	4649      	mov	r1, r9
 800456e:	4638      	mov	r0, r7
 8004570:	47c0      	blx	r8
 8004572:	3001      	adds	r0, #1
 8004574:	d0e6      	beq.n	8004544 <_printf_common+0xa4>
 8004576:	3601      	adds	r6, #1
 8004578:	e7d9      	b.n	800452e <_printf_common+0x8e>
	...

0800457c <_printf_i>:
 800457c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004580:	7e0f      	ldrb	r7, [r1, #24]
 8004582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004584:	2f78      	cmp	r7, #120	; 0x78
 8004586:	4691      	mov	r9, r2
 8004588:	4680      	mov	r8, r0
 800458a:	460c      	mov	r4, r1
 800458c:	469a      	mov	sl, r3
 800458e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004592:	d807      	bhi.n	80045a4 <_printf_i+0x28>
 8004594:	2f62      	cmp	r7, #98	; 0x62
 8004596:	d80a      	bhi.n	80045ae <_printf_i+0x32>
 8004598:	2f00      	cmp	r7, #0
 800459a:	f000 80d4 	beq.w	8004746 <_printf_i+0x1ca>
 800459e:	2f58      	cmp	r7, #88	; 0x58
 80045a0:	f000 80c0 	beq.w	8004724 <_printf_i+0x1a8>
 80045a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045ac:	e03a      	b.n	8004624 <_printf_i+0xa8>
 80045ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045b2:	2b15      	cmp	r3, #21
 80045b4:	d8f6      	bhi.n	80045a4 <_printf_i+0x28>
 80045b6:	a101      	add	r1, pc, #4	; (adr r1, 80045bc <_printf_i+0x40>)
 80045b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045bc:	08004615 	.word	0x08004615
 80045c0:	08004629 	.word	0x08004629
 80045c4:	080045a5 	.word	0x080045a5
 80045c8:	080045a5 	.word	0x080045a5
 80045cc:	080045a5 	.word	0x080045a5
 80045d0:	080045a5 	.word	0x080045a5
 80045d4:	08004629 	.word	0x08004629
 80045d8:	080045a5 	.word	0x080045a5
 80045dc:	080045a5 	.word	0x080045a5
 80045e0:	080045a5 	.word	0x080045a5
 80045e4:	080045a5 	.word	0x080045a5
 80045e8:	0800472d 	.word	0x0800472d
 80045ec:	08004655 	.word	0x08004655
 80045f0:	080046e7 	.word	0x080046e7
 80045f4:	080045a5 	.word	0x080045a5
 80045f8:	080045a5 	.word	0x080045a5
 80045fc:	0800474f 	.word	0x0800474f
 8004600:	080045a5 	.word	0x080045a5
 8004604:	08004655 	.word	0x08004655
 8004608:	080045a5 	.word	0x080045a5
 800460c:	080045a5 	.word	0x080045a5
 8004610:	080046ef 	.word	0x080046ef
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	602a      	str	r2, [r5, #0]
 800461c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004624:	2301      	movs	r3, #1
 8004626:	e09f      	b.n	8004768 <_printf_i+0x1ec>
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	0607      	lsls	r7, r0, #24
 800462e:	f103 0104 	add.w	r1, r3, #4
 8004632:	6029      	str	r1, [r5, #0]
 8004634:	d501      	bpl.n	800463a <_printf_i+0xbe>
 8004636:	681e      	ldr	r6, [r3, #0]
 8004638:	e003      	b.n	8004642 <_printf_i+0xc6>
 800463a:	0646      	lsls	r6, r0, #25
 800463c:	d5fb      	bpl.n	8004636 <_printf_i+0xba>
 800463e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004642:	2e00      	cmp	r6, #0
 8004644:	da03      	bge.n	800464e <_printf_i+0xd2>
 8004646:	232d      	movs	r3, #45	; 0x2d
 8004648:	4276      	negs	r6, r6
 800464a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464e:	485a      	ldr	r0, [pc, #360]	; (80047b8 <_printf_i+0x23c>)
 8004650:	230a      	movs	r3, #10
 8004652:	e012      	b.n	800467a <_printf_i+0xfe>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	6820      	ldr	r0, [r4, #0]
 8004658:	1d19      	adds	r1, r3, #4
 800465a:	6029      	str	r1, [r5, #0]
 800465c:	0605      	lsls	r5, r0, #24
 800465e:	d501      	bpl.n	8004664 <_printf_i+0xe8>
 8004660:	681e      	ldr	r6, [r3, #0]
 8004662:	e002      	b.n	800466a <_printf_i+0xee>
 8004664:	0641      	lsls	r1, r0, #25
 8004666:	d5fb      	bpl.n	8004660 <_printf_i+0xe4>
 8004668:	881e      	ldrh	r6, [r3, #0]
 800466a:	4853      	ldr	r0, [pc, #332]	; (80047b8 <_printf_i+0x23c>)
 800466c:	2f6f      	cmp	r7, #111	; 0x6f
 800466e:	bf0c      	ite	eq
 8004670:	2308      	moveq	r3, #8
 8004672:	230a      	movne	r3, #10
 8004674:	2100      	movs	r1, #0
 8004676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800467a:	6865      	ldr	r5, [r4, #4]
 800467c:	60a5      	str	r5, [r4, #8]
 800467e:	2d00      	cmp	r5, #0
 8004680:	bfa2      	ittt	ge
 8004682:	6821      	ldrge	r1, [r4, #0]
 8004684:	f021 0104 	bicge.w	r1, r1, #4
 8004688:	6021      	strge	r1, [r4, #0]
 800468a:	b90e      	cbnz	r6, 8004690 <_printf_i+0x114>
 800468c:	2d00      	cmp	r5, #0
 800468e:	d04b      	beq.n	8004728 <_printf_i+0x1ac>
 8004690:	4615      	mov	r5, r2
 8004692:	fbb6 f1f3 	udiv	r1, r6, r3
 8004696:	fb03 6711 	mls	r7, r3, r1, r6
 800469a:	5dc7      	ldrb	r7, [r0, r7]
 800469c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046a0:	4637      	mov	r7, r6
 80046a2:	42bb      	cmp	r3, r7
 80046a4:	460e      	mov	r6, r1
 80046a6:	d9f4      	bls.n	8004692 <_printf_i+0x116>
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d10b      	bne.n	80046c4 <_printf_i+0x148>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	07de      	lsls	r6, r3, #31
 80046b0:	d508      	bpl.n	80046c4 <_printf_i+0x148>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	6861      	ldr	r1, [r4, #4]
 80046b6:	4299      	cmp	r1, r3
 80046b8:	bfde      	ittt	le
 80046ba:	2330      	movle	r3, #48	; 0x30
 80046bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046c4:	1b52      	subs	r2, r2, r5
 80046c6:	6122      	str	r2, [r4, #16]
 80046c8:	f8cd a000 	str.w	sl, [sp]
 80046cc:	464b      	mov	r3, r9
 80046ce:	aa03      	add	r2, sp, #12
 80046d0:	4621      	mov	r1, r4
 80046d2:	4640      	mov	r0, r8
 80046d4:	f7ff fee4 	bl	80044a0 <_printf_common>
 80046d8:	3001      	adds	r0, #1
 80046da:	d14a      	bne.n	8004772 <_printf_i+0x1f6>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	b004      	add	sp, #16
 80046e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	f043 0320 	orr.w	r3, r3, #32
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	4833      	ldr	r0, [pc, #204]	; (80047bc <_printf_i+0x240>)
 80046f0:	2778      	movs	r7, #120	; 0x78
 80046f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	6829      	ldr	r1, [r5, #0]
 80046fa:	061f      	lsls	r7, r3, #24
 80046fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004700:	d402      	bmi.n	8004708 <_printf_i+0x18c>
 8004702:	065f      	lsls	r7, r3, #25
 8004704:	bf48      	it	mi
 8004706:	b2b6      	uxthmi	r6, r6
 8004708:	07df      	lsls	r7, r3, #31
 800470a:	bf48      	it	mi
 800470c:	f043 0320 	orrmi.w	r3, r3, #32
 8004710:	6029      	str	r1, [r5, #0]
 8004712:	bf48      	it	mi
 8004714:	6023      	strmi	r3, [r4, #0]
 8004716:	b91e      	cbnz	r6, 8004720 <_printf_i+0x1a4>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	f023 0320 	bic.w	r3, r3, #32
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	2310      	movs	r3, #16
 8004722:	e7a7      	b.n	8004674 <_printf_i+0xf8>
 8004724:	4824      	ldr	r0, [pc, #144]	; (80047b8 <_printf_i+0x23c>)
 8004726:	e7e4      	b.n	80046f2 <_printf_i+0x176>
 8004728:	4615      	mov	r5, r2
 800472a:	e7bd      	b.n	80046a8 <_printf_i+0x12c>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	6826      	ldr	r6, [r4, #0]
 8004730:	6961      	ldr	r1, [r4, #20]
 8004732:	1d18      	adds	r0, r3, #4
 8004734:	6028      	str	r0, [r5, #0]
 8004736:	0635      	lsls	r5, r6, #24
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	d501      	bpl.n	8004740 <_printf_i+0x1c4>
 800473c:	6019      	str	r1, [r3, #0]
 800473e:	e002      	b.n	8004746 <_printf_i+0x1ca>
 8004740:	0670      	lsls	r0, r6, #25
 8004742:	d5fb      	bpl.n	800473c <_printf_i+0x1c0>
 8004744:	8019      	strh	r1, [r3, #0]
 8004746:	2300      	movs	r3, #0
 8004748:	6123      	str	r3, [r4, #16]
 800474a:	4615      	mov	r5, r2
 800474c:	e7bc      	b.n	80046c8 <_printf_i+0x14c>
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	1d1a      	adds	r2, r3, #4
 8004752:	602a      	str	r2, [r5, #0]
 8004754:	681d      	ldr	r5, [r3, #0]
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	2100      	movs	r1, #0
 800475a:	4628      	mov	r0, r5
 800475c:	f7fb fd58 	bl	8000210 <memchr>
 8004760:	b108      	cbz	r0, 8004766 <_printf_i+0x1ea>
 8004762:	1b40      	subs	r0, r0, r5
 8004764:	6060      	str	r0, [r4, #4]
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	2300      	movs	r3, #0
 800476c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004770:	e7aa      	b.n	80046c8 <_printf_i+0x14c>
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	462a      	mov	r2, r5
 8004776:	4649      	mov	r1, r9
 8004778:	4640      	mov	r0, r8
 800477a:	47d0      	blx	sl
 800477c:	3001      	adds	r0, #1
 800477e:	d0ad      	beq.n	80046dc <_printf_i+0x160>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	079b      	lsls	r3, r3, #30
 8004784:	d413      	bmi.n	80047ae <_printf_i+0x232>
 8004786:	68e0      	ldr	r0, [r4, #12]
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	4298      	cmp	r0, r3
 800478c:	bfb8      	it	lt
 800478e:	4618      	movlt	r0, r3
 8004790:	e7a6      	b.n	80046e0 <_printf_i+0x164>
 8004792:	2301      	movs	r3, #1
 8004794:	4632      	mov	r2, r6
 8004796:	4649      	mov	r1, r9
 8004798:	4640      	mov	r0, r8
 800479a:	47d0      	blx	sl
 800479c:	3001      	adds	r0, #1
 800479e:	d09d      	beq.n	80046dc <_printf_i+0x160>
 80047a0:	3501      	adds	r5, #1
 80047a2:	68e3      	ldr	r3, [r4, #12]
 80047a4:	9903      	ldr	r1, [sp, #12]
 80047a6:	1a5b      	subs	r3, r3, r1
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	dcf2      	bgt.n	8004792 <_printf_i+0x216>
 80047ac:	e7eb      	b.n	8004786 <_printf_i+0x20a>
 80047ae:	2500      	movs	r5, #0
 80047b0:	f104 0619 	add.w	r6, r4, #25
 80047b4:	e7f5      	b.n	80047a2 <_printf_i+0x226>
 80047b6:	bf00      	nop
 80047b8:	0800502d 	.word	0x0800502d
 80047bc:	0800503e 	.word	0x0800503e

080047c0 <__sflush_r>:
 80047c0:	898a      	ldrh	r2, [r1, #12]
 80047c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	0710      	lsls	r0, r2, #28
 80047ca:	460c      	mov	r4, r1
 80047cc:	d458      	bmi.n	8004880 <__sflush_r+0xc0>
 80047ce:	684b      	ldr	r3, [r1, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dc05      	bgt.n	80047e0 <__sflush_r+0x20>
 80047d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	dc02      	bgt.n	80047e0 <__sflush_r+0x20>
 80047da:	2000      	movs	r0, #0
 80047dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047e2:	2e00      	cmp	r6, #0
 80047e4:	d0f9      	beq.n	80047da <__sflush_r+0x1a>
 80047e6:	2300      	movs	r3, #0
 80047e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047ec:	682f      	ldr	r7, [r5, #0]
 80047ee:	6a21      	ldr	r1, [r4, #32]
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	d032      	beq.n	800485a <__sflush_r+0x9a>
 80047f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	075a      	lsls	r2, r3, #29
 80047fa:	d505      	bpl.n	8004808 <__sflush_r+0x48>
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	1ac0      	subs	r0, r0, r3
 8004800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004802:	b10b      	cbz	r3, 8004808 <__sflush_r+0x48>
 8004804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004806:	1ac0      	subs	r0, r0, r3
 8004808:	2300      	movs	r3, #0
 800480a:	4602      	mov	r2, r0
 800480c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800480e:	6a21      	ldr	r1, [r4, #32]
 8004810:	4628      	mov	r0, r5
 8004812:	47b0      	blx	r6
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	d106      	bne.n	8004828 <__sflush_r+0x68>
 800481a:	6829      	ldr	r1, [r5, #0]
 800481c:	291d      	cmp	r1, #29
 800481e:	d82b      	bhi.n	8004878 <__sflush_r+0xb8>
 8004820:	4a29      	ldr	r2, [pc, #164]	; (80048c8 <__sflush_r+0x108>)
 8004822:	410a      	asrs	r2, r1
 8004824:	07d6      	lsls	r6, r2, #31
 8004826:	d427      	bmi.n	8004878 <__sflush_r+0xb8>
 8004828:	2200      	movs	r2, #0
 800482a:	6062      	str	r2, [r4, #4]
 800482c:	04d9      	lsls	r1, r3, #19
 800482e:	6922      	ldr	r2, [r4, #16]
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	d504      	bpl.n	800483e <__sflush_r+0x7e>
 8004834:	1c42      	adds	r2, r0, #1
 8004836:	d101      	bne.n	800483c <__sflush_r+0x7c>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b903      	cbnz	r3, 800483e <__sflush_r+0x7e>
 800483c:	6560      	str	r0, [r4, #84]	; 0x54
 800483e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004840:	602f      	str	r7, [r5, #0]
 8004842:	2900      	cmp	r1, #0
 8004844:	d0c9      	beq.n	80047da <__sflush_r+0x1a>
 8004846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800484a:	4299      	cmp	r1, r3
 800484c:	d002      	beq.n	8004854 <__sflush_r+0x94>
 800484e:	4628      	mov	r0, r5
 8004850:	f7ff fbea 	bl	8004028 <_free_r>
 8004854:	2000      	movs	r0, #0
 8004856:	6360      	str	r0, [r4, #52]	; 0x34
 8004858:	e7c0      	b.n	80047dc <__sflush_r+0x1c>
 800485a:	2301      	movs	r3, #1
 800485c:	4628      	mov	r0, r5
 800485e:	47b0      	blx	r6
 8004860:	1c41      	adds	r1, r0, #1
 8004862:	d1c8      	bne.n	80047f6 <__sflush_r+0x36>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0c5      	beq.n	80047f6 <__sflush_r+0x36>
 800486a:	2b1d      	cmp	r3, #29
 800486c:	d001      	beq.n	8004872 <__sflush_r+0xb2>
 800486e:	2b16      	cmp	r3, #22
 8004870:	d101      	bne.n	8004876 <__sflush_r+0xb6>
 8004872:	602f      	str	r7, [r5, #0]
 8004874:	e7b1      	b.n	80047da <__sflush_r+0x1a>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487c:	81a3      	strh	r3, [r4, #12]
 800487e:	e7ad      	b.n	80047dc <__sflush_r+0x1c>
 8004880:	690f      	ldr	r7, [r1, #16]
 8004882:	2f00      	cmp	r7, #0
 8004884:	d0a9      	beq.n	80047da <__sflush_r+0x1a>
 8004886:	0793      	lsls	r3, r2, #30
 8004888:	680e      	ldr	r6, [r1, #0]
 800488a:	bf08      	it	eq
 800488c:	694b      	ldreq	r3, [r1, #20]
 800488e:	600f      	str	r7, [r1, #0]
 8004890:	bf18      	it	ne
 8004892:	2300      	movne	r3, #0
 8004894:	eba6 0807 	sub.w	r8, r6, r7
 8004898:	608b      	str	r3, [r1, #8]
 800489a:	f1b8 0f00 	cmp.w	r8, #0
 800489e:	dd9c      	ble.n	80047da <__sflush_r+0x1a>
 80048a0:	6a21      	ldr	r1, [r4, #32]
 80048a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a4:	4643      	mov	r3, r8
 80048a6:	463a      	mov	r2, r7
 80048a8:	4628      	mov	r0, r5
 80048aa:	47b0      	blx	r6
 80048ac:	2800      	cmp	r0, #0
 80048ae:	dc06      	bgt.n	80048be <__sflush_r+0xfe>
 80048b0:	89a3      	ldrh	r3, [r4, #12]
 80048b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	e78e      	b.n	80047dc <__sflush_r+0x1c>
 80048be:	4407      	add	r7, r0
 80048c0:	eba8 0800 	sub.w	r8, r8, r0
 80048c4:	e7e9      	b.n	800489a <__sflush_r+0xda>
 80048c6:	bf00      	nop
 80048c8:	dfbffffe 	.word	0xdfbffffe

080048cc <_fflush_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	4605      	mov	r5, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	b913      	cbnz	r3, 80048dc <_fflush_r+0x10>
 80048d6:	2500      	movs	r5, #0
 80048d8:	4628      	mov	r0, r5
 80048da:	bd38      	pop	{r3, r4, r5, pc}
 80048dc:	b118      	cbz	r0, 80048e6 <_fflush_r+0x1a>
 80048de:	6a03      	ldr	r3, [r0, #32]
 80048e0:	b90b      	cbnz	r3, 80048e6 <_fflush_r+0x1a>
 80048e2:	f7ff fa9b 	bl	8003e1c <__sinit>
 80048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f3      	beq.n	80048d6 <_fflush_r+0xa>
 80048ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048f0:	07d0      	lsls	r0, r2, #31
 80048f2:	d404      	bmi.n	80048fe <_fflush_r+0x32>
 80048f4:	0599      	lsls	r1, r3, #22
 80048f6:	d402      	bmi.n	80048fe <_fflush_r+0x32>
 80048f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048fa:	f7ff fb93 	bl	8004024 <__retarget_lock_acquire_recursive>
 80048fe:	4628      	mov	r0, r5
 8004900:	4621      	mov	r1, r4
 8004902:	f7ff ff5d 	bl	80047c0 <__sflush_r>
 8004906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004908:	07da      	lsls	r2, r3, #31
 800490a:	4605      	mov	r5, r0
 800490c:	d4e4      	bmi.n	80048d8 <_fflush_r+0xc>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	059b      	lsls	r3, r3, #22
 8004912:	d4e1      	bmi.n	80048d8 <_fflush_r+0xc>
 8004914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004916:	f7ff fb86 	bl	8004026 <__retarget_lock_release_recursive>
 800491a:	e7dd      	b.n	80048d8 <_fflush_r+0xc>

0800491c <__swbuf_r>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	460e      	mov	r6, r1
 8004920:	4614      	mov	r4, r2
 8004922:	4605      	mov	r5, r0
 8004924:	b118      	cbz	r0, 800492e <__swbuf_r+0x12>
 8004926:	6a03      	ldr	r3, [r0, #32]
 8004928:	b90b      	cbnz	r3, 800492e <__swbuf_r+0x12>
 800492a:	f7ff fa77 	bl	8003e1c <__sinit>
 800492e:	69a3      	ldr	r3, [r4, #24]
 8004930:	60a3      	str	r3, [r4, #8]
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	071a      	lsls	r2, r3, #28
 8004936:	d525      	bpl.n	8004984 <__swbuf_r+0x68>
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	b31b      	cbz	r3, 8004984 <__swbuf_r+0x68>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	6922      	ldr	r2, [r4, #16]
 8004940:	1a98      	subs	r0, r3, r2
 8004942:	6963      	ldr	r3, [r4, #20]
 8004944:	b2f6      	uxtb	r6, r6
 8004946:	4283      	cmp	r3, r0
 8004948:	4637      	mov	r7, r6
 800494a:	dc04      	bgt.n	8004956 <__swbuf_r+0x3a>
 800494c:	4621      	mov	r1, r4
 800494e:	4628      	mov	r0, r5
 8004950:	f7ff ffbc 	bl	80048cc <_fflush_r>
 8004954:	b9e0      	cbnz	r0, 8004990 <__swbuf_r+0x74>
 8004956:	68a3      	ldr	r3, [r4, #8]
 8004958:	3b01      	subs	r3, #1
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	6022      	str	r2, [r4, #0]
 8004962:	701e      	strb	r6, [r3, #0]
 8004964:	6962      	ldr	r2, [r4, #20]
 8004966:	1c43      	adds	r3, r0, #1
 8004968:	429a      	cmp	r2, r3
 800496a:	d004      	beq.n	8004976 <__swbuf_r+0x5a>
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	07db      	lsls	r3, r3, #31
 8004970:	d506      	bpl.n	8004980 <__swbuf_r+0x64>
 8004972:	2e0a      	cmp	r6, #10
 8004974:	d104      	bne.n	8004980 <__swbuf_r+0x64>
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f7ff ffa7 	bl	80048cc <_fflush_r>
 800497e:	b938      	cbnz	r0, 8004990 <__swbuf_r+0x74>
 8004980:	4638      	mov	r0, r7
 8004982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	f000 f806 	bl	8004998 <__swsetup_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	d0d5      	beq.n	800493c <__swbuf_r+0x20>
 8004990:	f04f 37ff 	mov.w	r7, #4294967295
 8004994:	e7f4      	b.n	8004980 <__swbuf_r+0x64>
	...

08004998 <__swsetup_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <__swsetup_r+0xac>)
 800499c:	4605      	mov	r5, r0
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	460c      	mov	r4, r1
 80049a2:	b118      	cbz	r0, 80049ac <__swsetup_r+0x14>
 80049a4:	6a03      	ldr	r3, [r0, #32]
 80049a6:	b90b      	cbnz	r3, 80049ac <__swsetup_r+0x14>
 80049a8:	f7ff fa38 	bl	8003e1c <__sinit>
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049b2:	0718      	lsls	r0, r3, #28
 80049b4:	d422      	bmi.n	80049fc <__swsetup_r+0x64>
 80049b6:	06d9      	lsls	r1, r3, #27
 80049b8:	d407      	bmi.n	80049ca <__swsetup_r+0x32>
 80049ba:	2309      	movs	r3, #9
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	e034      	b.n	8004a34 <__swsetup_r+0x9c>
 80049ca:	0758      	lsls	r0, r3, #29
 80049cc:	d512      	bpl.n	80049f4 <__swsetup_r+0x5c>
 80049ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049d0:	b141      	cbz	r1, 80049e4 <__swsetup_r+0x4c>
 80049d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d002      	beq.n	80049e0 <__swsetup_r+0x48>
 80049da:	4628      	mov	r0, r5
 80049dc:	f7ff fb24 	bl	8004028 <_free_r>
 80049e0:	2300      	movs	r3, #0
 80049e2:	6363      	str	r3, [r4, #52]	; 0x34
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	2300      	movs	r3, #0
 80049ee:	6063      	str	r3, [r4, #4]
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	f043 0308 	orr.w	r3, r3, #8
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	b94b      	cbnz	r3, 8004a14 <__swsetup_r+0x7c>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0a:	d003      	beq.n	8004a14 <__swsetup_r+0x7c>
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f000 f850 	bl	8004ab4 <__smakebuf_r>
 8004a14:	89a0      	ldrh	r0, [r4, #12]
 8004a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a1a:	f010 0301 	ands.w	r3, r0, #1
 8004a1e:	d00a      	beq.n	8004a36 <__swsetup_r+0x9e>
 8004a20:	2300      	movs	r3, #0
 8004a22:	60a3      	str	r3, [r4, #8]
 8004a24:	6963      	ldr	r3, [r4, #20]
 8004a26:	425b      	negs	r3, r3
 8004a28:	61a3      	str	r3, [r4, #24]
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	b943      	cbnz	r3, 8004a40 <__swsetup_r+0xa8>
 8004a2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a32:	d1c4      	bne.n	80049be <__swsetup_r+0x26>
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
 8004a36:	0781      	lsls	r1, r0, #30
 8004a38:	bf58      	it	pl
 8004a3a:	6963      	ldrpl	r3, [r4, #20]
 8004a3c:	60a3      	str	r3, [r4, #8]
 8004a3e:	e7f4      	b.n	8004a2a <__swsetup_r+0x92>
 8004a40:	2000      	movs	r0, #0
 8004a42:	e7f7      	b.n	8004a34 <__swsetup_r+0x9c>
 8004a44:	20000064 	.word	0x20000064

08004a48 <_sbrk_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_sbrk_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc ff80 	bl	8001958 <_sbrk>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_sbrk_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_sbrk_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	200002f4 	.word	0x200002f4

08004a68 <__swhatbuf_r>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a70:	2900      	cmp	r1, #0
 8004a72:	b096      	sub	sp, #88	; 0x58
 8004a74:	4615      	mov	r5, r2
 8004a76:	461e      	mov	r6, r3
 8004a78:	da0d      	bge.n	8004a96 <__swhatbuf_r+0x2e>
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a8a:	2340      	movne	r3, #64	; 0x40
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	6031      	str	r1, [r6, #0]
 8004a90:	602b      	str	r3, [r5, #0]
 8004a92:	b016      	add	sp, #88	; 0x58
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
 8004a96:	466a      	mov	r2, sp
 8004a98:	f000 f848 	bl	8004b2c <_fstat_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	dbec      	blt.n	8004a7a <__swhatbuf_r+0x12>
 8004aa0:	9901      	ldr	r1, [sp, #4]
 8004aa2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004aa6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004aaa:	4259      	negs	r1, r3
 8004aac:	4159      	adcs	r1, r3
 8004aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab2:	e7eb      	b.n	8004a8c <__swhatbuf_r+0x24>

08004ab4 <__smakebuf_r>:
 8004ab4:	898b      	ldrh	r3, [r1, #12]
 8004ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ab8:	079d      	lsls	r5, r3, #30
 8004aba:	4606      	mov	r6, r0
 8004abc:	460c      	mov	r4, r1
 8004abe:	d507      	bpl.n	8004ad0 <__smakebuf_r+0x1c>
 8004ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	6163      	str	r3, [r4, #20]
 8004acc:	b002      	add	sp, #8
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	ab01      	add	r3, sp, #4
 8004ad2:	466a      	mov	r2, sp
 8004ad4:	f7ff ffc8 	bl	8004a68 <__swhatbuf_r>
 8004ad8:	9900      	ldr	r1, [sp, #0]
 8004ada:	4605      	mov	r5, r0
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7ff fb0f 	bl	8004100 <_malloc_r>
 8004ae2:	b948      	cbnz	r0, 8004af8 <__smakebuf_r+0x44>
 8004ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae8:	059a      	lsls	r2, r3, #22
 8004aea:	d4ef      	bmi.n	8004acc <__smakebuf_r+0x18>
 8004aec:	f023 0303 	bic.w	r3, r3, #3
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	e7e3      	b.n	8004ac0 <__smakebuf_r+0xc>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	6020      	str	r0, [r4, #0]
 8004afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	9b00      	ldr	r3, [sp, #0]
 8004b04:	6163      	str	r3, [r4, #20]
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	6120      	str	r0, [r4, #16]
 8004b0a:	b15b      	cbz	r3, 8004b24 <__smakebuf_r+0x70>
 8004b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b10:	4630      	mov	r0, r6
 8004b12:	f000 f81d 	bl	8004b50 <_isatty_r>
 8004b16:	b128      	cbz	r0, 8004b24 <__smakebuf_r+0x70>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	431d      	orrs	r5, r3
 8004b28:	81a5      	strh	r5, [r4, #12]
 8004b2a:	e7cf      	b.n	8004acc <__smakebuf_r+0x18>

08004b2c <_fstat_r>:
 8004b2c:	b538      	push	{r3, r4, r5, lr}
 8004b2e:	4d07      	ldr	r5, [pc, #28]	; (8004b4c <_fstat_r+0x20>)
 8004b30:	2300      	movs	r3, #0
 8004b32:	4604      	mov	r4, r0
 8004b34:	4608      	mov	r0, r1
 8004b36:	4611      	mov	r1, r2
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	f7fc fee4 	bl	8001906 <_fstat>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	d102      	bne.n	8004b48 <_fstat_r+0x1c>
 8004b42:	682b      	ldr	r3, [r5, #0]
 8004b44:	b103      	cbz	r3, 8004b48 <_fstat_r+0x1c>
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	bd38      	pop	{r3, r4, r5, pc}
 8004b4a:	bf00      	nop
 8004b4c:	200002f4 	.word	0x200002f4

08004b50 <_isatty_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4d06      	ldr	r5, [pc, #24]	; (8004b6c <_isatty_r+0x1c>)
 8004b54:	2300      	movs	r3, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	602b      	str	r3, [r5, #0]
 8004b5c:	f7fc fee3 	bl	8001926 <_isatty>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d102      	bne.n	8004b6a <_isatty_r+0x1a>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	b103      	cbz	r3, 8004b6a <_isatty_r+0x1a>
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
 8004b6c:	200002f4 	.word	0x200002f4

08004b70 <log>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	ed2d 8b02 	vpush	{d8}
 8004b76:	ec55 4b10 	vmov	r4, r5, d0
 8004b7a:	f000 f841 	bl	8004c00 <__ieee754_log>
 8004b7e:	4622      	mov	r2, r4
 8004b80:	462b      	mov	r3, r5
 8004b82:	4620      	mov	r0, r4
 8004b84:	4629      	mov	r1, r5
 8004b86:	eeb0 8a40 	vmov.f32	s16, s0
 8004b8a:	eef0 8a60 	vmov.f32	s17, s1
 8004b8e:	f7fb ffe5 	bl	8000b5c <__aeabi_dcmpun>
 8004b92:	b998      	cbnz	r0, 8004bbc <log+0x4c>
 8004b94:	2200      	movs	r2, #0
 8004b96:	2300      	movs	r3, #0
 8004b98:	4620      	mov	r0, r4
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	f7fb ffd4 	bl	8000b48 <__aeabi_dcmpgt>
 8004ba0:	b960      	cbnz	r0, 8004bbc <log+0x4c>
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fb ffa5 	bl	8000af8 <__aeabi_dcmpeq>
 8004bae:	b160      	cbz	r0, 8004bca <log+0x5a>
 8004bb0:	f7ff fa0e 	bl	8003fd0 <__errno>
 8004bb4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8004be0 <log+0x70>
 8004bb8:	2322      	movs	r3, #34	; 0x22
 8004bba:	6003      	str	r3, [r0, #0]
 8004bbc:	eeb0 0a48 	vmov.f32	s0, s16
 8004bc0:	eef0 0a68 	vmov.f32	s1, s17
 8004bc4:	ecbd 8b02 	vpop	{d8}
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	f7ff fa01 	bl	8003fd0 <__errno>
 8004bce:	ecbd 8b02 	vpop	{d8}
 8004bd2:	2321      	movs	r3, #33	; 0x21
 8004bd4:	6003      	str	r3, [r0, #0]
 8004bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bda:	4803      	ldr	r0, [pc, #12]	; (8004be8 <log+0x78>)
 8004bdc:	f000 b808 	b.w	8004bf0 <nan>
 8004be0:	00000000 	.word	0x00000000
 8004be4:	fff00000 	.word	0xfff00000
 8004be8:	08005021 	.word	0x08005021
 8004bec:	00000000 	.word	0x00000000

08004bf0 <nan>:
 8004bf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004bf8 <nan+0x8>
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	7ff80000 	.word	0x7ff80000

08004c00 <__ieee754_log>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	ec51 0b10 	vmov	r0, r1, d0
 8004c08:	ed2d 8b04 	vpush	{d8-d9}
 8004c0c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004c10:	b083      	sub	sp, #12
 8004c12:	460d      	mov	r5, r1
 8004c14:	da29      	bge.n	8004c6a <__ieee754_log+0x6a>
 8004c16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c1a:	4303      	orrs	r3, r0
 8004c1c:	ee10 2a10 	vmov	r2, s0
 8004c20:	d10c      	bne.n	8004c3c <__ieee754_log+0x3c>
 8004c22:	49cf      	ldr	r1, [pc, #828]	; (8004f60 <__ieee754_log+0x360>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	2300      	movs	r3, #0
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f7fb fe27 	bl	800087c <__aeabi_ddiv>
 8004c2e:	ec41 0b10 	vmov	d0, r0, r1
 8004c32:	b003      	add	sp, #12
 8004c34:	ecbd 8b04 	vpop	{d8-d9}
 8004c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	da05      	bge.n	8004c4c <__ieee754_log+0x4c>
 8004c40:	460b      	mov	r3, r1
 8004c42:	f7fb fb39 	bl	80002b8 <__aeabi_dsub>
 8004c46:	2200      	movs	r2, #0
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e7ee      	b.n	8004c2a <__ieee754_log+0x2a>
 8004c4c:	4bc5      	ldr	r3, [pc, #788]	; (8004f64 <__ieee754_log+0x364>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f7fb fcea 	bl	8000628 <__aeabi_dmul>
 8004c54:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004c58:	460d      	mov	r5, r1
 8004c5a:	4ac3      	ldr	r2, [pc, #780]	; (8004f68 <__ieee754_log+0x368>)
 8004c5c:	4295      	cmp	r5, r2
 8004c5e:	dd06      	ble.n	8004c6e <__ieee754_log+0x6e>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	f7fb fb2a 	bl	80002bc <__adddf3>
 8004c68:	e7e1      	b.n	8004c2e <__ieee754_log+0x2e>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e7f5      	b.n	8004c5a <__ieee754_log+0x5a>
 8004c6e:	152c      	asrs	r4, r5, #20
 8004c70:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c74:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004c78:	441c      	add	r4, r3
 8004c7a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004c7e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c86:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004c8a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004c8e:	ea42 0105 	orr.w	r1, r2, r5
 8004c92:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004c96:	2200      	movs	r2, #0
 8004c98:	4bb4      	ldr	r3, [pc, #720]	; (8004f6c <__ieee754_log+0x36c>)
 8004c9a:	f7fb fb0d 	bl	80002b8 <__aeabi_dsub>
 8004c9e:	1cab      	adds	r3, r5, #2
 8004ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	4682      	mov	sl, r0
 8004ca8:	468b      	mov	fp, r1
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	dc53      	bgt.n	8004d58 <__ieee754_log+0x158>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f7fb ff21 	bl	8000af8 <__aeabi_dcmpeq>
 8004cb6:	b1d0      	cbz	r0, 8004cee <__ieee754_log+0xee>
 8004cb8:	2c00      	cmp	r4, #0
 8004cba:	f000 8122 	beq.w	8004f02 <__ieee754_log+0x302>
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7fb fc48 	bl	8000554 <__aeabi_i2d>
 8004cc4:	a390      	add	r3, pc, #576	; (adr r3, 8004f08 <__ieee754_log+0x308>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	4606      	mov	r6, r0
 8004ccc:	460f      	mov	r7, r1
 8004cce:	f7fb fcab 	bl	8000628 <__aeabi_dmul>
 8004cd2:	a38f      	add	r3, pc, #572	; (adr r3, 8004f10 <__ieee754_log+0x310>)
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	4604      	mov	r4, r0
 8004cda:	460d      	mov	r5, r1
 8004cdc:	4630      	mov	r0, r6
 8004cde:	4639      	mov	r1, r7
 8004ce0:	f7fb fca2 	bl	8000628 <__aeabi_dmul>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4620      	mov	r0, r4
 8004cea:	4629      	mov	r1, r5
 8004cec:	e7ba      	b.n	8004c64 <__ieee754_log+0x64>
 8004cee:	a38a      	add	r3, pc, #552	; (adr r3, 8004f18 <__ieee754_log+0x318>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	4650      	mov	r0, sl
 8004cf6:	4659      	mov	r1, fp
 8004cf8:	f7fb fc96 	bl	8000628 <__aeabi_dmul>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	2000      	movs	r0, #0
 8004d02:	499b      	ldr	r1, [pc, #620]	; (8004f70 <__ieee754_log+0x370>)
 8004d04:	f7fb fad8 	bl	80002b8 <__aeabi_dsub>
 8004d08:	4652      	mov	r2, sl
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	460f      	mov	r7, r1
 8004d0e:	465b      	mov	r3, fp
 8004d10:	4650      	mov	r0, sl
 8004d12:	4659      	mov	r1, fp
 8004d14:	f7fb fc88 	bl	8000628 <__aeabi_dmul>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	4639      	mov	r1, r7
 8004d20:	f7fb fc82 	bl	8000628 <__aeabi_dmul>
 8004d24:	4606      	mov	r6, r0
 8004d26:	460f      	mov	r7, r1
 8004d28:	b914      	cbnz	r4, 8004d30 <__ieee754_log+0x130>
 8004d2a:	4632      	mov	r2, r6
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	e0a2      	b.n	8004e76 <__ieee754_log+0x276>
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7fb fc0f 	bl	8000554 <__aeabi_i2d>
 8004d36:	a374      	add	r3, pc, #464	; (adr r3, 8004f08 <__ieee754_log+0x308>)
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	4680      	mov	r8, r0
 8004d3e:	4689      	mov	r9, r1
 8004d40:	f7fb fc72 	bl	8000628 <__aeabi_dmul>
 8004d44:	a372      	add	r3, pc, #456	; (adr r3, 8004f10 <__ieee754_log+0x310>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	460d      	mov	r5, r1
 8004d4e:	4640      	mov	r0, r8
 8004d50:	4649      	mov	r1, r9
 8004d52:	f7fb fc69 	bl	8000628 <__aeabi_dmul>
 8004d56:	e0a7      	b.n	8004ea8 <__ieee754_log+0x2a8>
 8004d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d5c:	f7fb faae 	bl	80002bc <__adddf3>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4650      	mov	r0, sl
 8004d66:	4659      	mov	r1, fp
 8004d68:	f7fb fd88 	bl	800087c <__aeabi_ddiv>
 8004d6c:	ec41 0b18 	vmov	d8, r0, r1
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7fb fbef 	bl	8000554 <__aeabi_i2d>
 8004d76:	ec53 2b18 	vmov	r2, r3, d8
 8004d7a:	ec41 0b19 	vmov	d9, r0, r1
 8004d7e:	ec51 0b18 	vmov	r0, r1, d8
 8004d82:	f7fb fc51 	bl	8000628 <__aeabi_dmul>
 8004d86:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004d8a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4680      	mov	r8, r0
 8004d96:	4689      	mov	r9, r1
 8004d98:	f7fb fc46 	bl	8000628 <__aeabi_dmul>
 8004d9c:	a360      	add	r3, pc, #384	; (adr r3, 8004f20 <__ieee754_log+0x320>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	4606      	mov	r6, r0
 8004da4:	460f      	mov	r7, r1
 8004da6:	f7fb fc3f 	bl	8000628 <__aeabi_dmul>
 8004daa:	a35f      	add	r3, pc, #380	; (adr r3, 8004f28 <__ieee754_log+0x328>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb fa84 	bl	80002bc <__adddf3>
 8004db4:	4632      	mov	r2, r6
 8004db6:	463b      	mov	r3, r7
 8004db8:	f7fb fc36 	bl	8000628 <__aeabi_dmul>
 8004dbc:	a35c      	add	r3, pc, #368	; (adr r3, 8004f30 <__ieee754_log+0x330>)
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f7fb fa7b 	bl	80002bc <__adddf3>
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	463b      	mov	r3, r7
 8004dca:	f7fb fc2d 	bl	8000628 <__aeabi_dmul>
 8004dce:	a35a      	add	r3, pc, #360	; (adr r3, 8004f38 <__ieee754_log+0x338>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb fa72 	bl	80002bc <__adddf3>
 8004dd8:	4642      	mov	r2, r8
 8004dda:	464b      	mov	r3, r9
 8004ddc:	f7fb fc24 	bl	8000628 <__aeabi_dmul>
 8004de0:	a357      	add	r3, pc, #348	; (adr r3, 8004f40 <__ieee754_log+0x340>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	4680      	mov	r8, r0
 8004de8:	4689      	mov	r9, r1
 8004dea:	4630      	mov	r0, r6
 8004dec:	4639      	mov	r1, r7
 8004dee:	f7fb fc1b 	bl	8000628 <__aeabi_dmul>
 8004df2:	a355      	add	r3, pc, #340	; (adr r3, 8004f48 <__ieee754_log+0x348>)
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f7fb fa60 	bl	80002bc <__adddf3>
 8004dfc:	4632      	mov	r2, r6
 8004dfe:	463b      	mov	r3, r7
 8004e00:	f7fb fc12 	bl	8000628 <__aeabi_dmul>
 8004e04:	a352      	add	r3, pc, #328	; (adr r3, 8004f50 <__ieee754_log+0x350>)
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f7fb fa57 	bl	80002bc <__adddf3>
 8004e0e:	4632      	mov	r2, r6
 8004e10:	463b      	mov	r3, r7
 8004e12:	f7fb fc09 	bl	8000628 <__aeabi_dmul>
 8004e16:	460b      	mov	r3, r1
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	f7fb fa4d 	bl	80002bc <__adddf3>
 8004e22:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	3551      	adds	r5, #81	; 0x51
 8004e2a:	431d      	orrs	r5, r3
 8004e2c:	2d00      	cmp	r5, #0
 8004e2e:	4680      	mov	r8, r0
 8004e30:	4689      	mov	r9, r1
 8004e32:	dd48      	ble.n	8004ec6 <__ieee754_log+0x2c6>
 8004e34:	4b4e      	ldr	r3, [pc, #312]	; (8004f70 <__ieee754_log+0x370>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	4650      	mov	r0, sl
 8004e3a:	4659      	mov	r1, fp
 8004e3c:	f7fb fbf4 	bl	8000628 <__aeabi_dmul>
 8004e40:	4652      	mov	r2, sl
 8004e42:	465b      	mov	r3, fp
 8004e44:	f7fb fbf0 	bl	8000628 <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	460f      	mov	r7, r1
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb fa32 	bl	80002bc <__adddf3>
 8004e58:	ec53 2b18 	vmov	r2, r3, d8
 8004e5c:	f7fb fbe4 	bl	8000628 <__aeabi_dmul>
 8004e60:	4680      	mov	r8, r0
 8004e62:	4689      	mov	r9, r1
 8004e64:	b964      	cbnz	r4, 8004e80 <__ieee754_log+0x280>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	f7fb fa23 	bl	80002b8 <__aeabi_dsub>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4650      	mov	r0, sl
 8004e78:	4659      	mov	r1, fp
 8004e7a:	f7fb fa1d 	bl	80002b8 <__aeabi_dsub>
 8004e7e:	e6d6      	b.n	8004c2e <__ieee754_log+0x2e>
 8004e80:	a321      	add	r3, pc, #132	; (adr r3, 8004f08 <__ieee754_log+0x308>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	ec51 0b19 	vmov	r0, r1, d9
 8004e8a:	f7fb fbcd 	bl	8000628 <__aeabi_dmul>
 8004e8e:	a320      	add	r3, pc, #128	; (adr r3, 8004f10 <__ieee754_log+0x310>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	4604      	mov	r4, r0
 8004e96:	460d      	mov	r5, r1
 8004e98:	ec51 0b19 	vmov	r0, r1, d9
 8004e9c:	f7fb fbc4 	bl	8000628 <__aeabi_dmul>
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	f7fb fa0a 	bl	80002bc <__adddf3>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4630      	mov	r0, r6
 8004eae:	4639      	mov	r1, r7
 8004eb0:	f7fb fa02 	bl	80002b8 <__aeabi_dsub>
 8004eb4:	4652      	mov	r2, sl
 8004eb6:	465b      	mov	r3, fp
 8004eb8:	f7fb f9fe 	bl	80002b8 <__aeabi_dsub>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	e7d9      	b.n	8004e7a <__ieee754_log+0x27a>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4650      	mov	r0, sl
 8004ecc:	4659      	mov	r1, fp
 8004ece:	f7fb f9f3 	bl	80002b8 <__aeabi_dsub>
 8004ed2:	ec53 2b18 	vmov	r2, r3, d8
 8004ed6:	f7fb fba7 	bl	8000628 <__aeabi_dmul>
 8004eda:	4606      	mov	r6, r0
 8004edc:	460f      	mov	r7, r1
 8004ede:	2c00      	cmp	r4, #0
 8004ee0:	f43f af23 	beq.w	8004d2a <__ieee754_log+0x12a>
 8004ee4:	a308      	add	r3, pc, #32	; (adr r3, 8004f08 <__ieee754_log+0x308>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	ec51 0b19 	vmov	r0, r1, d9
 8004eee:	f7fb fb9b 	bl	8000628 <__aeabi_dmul>
 8004ef2:	a307      	add	r3, pc, #28	; (adr r3, 8004f10 <__ieee754_log+0x310>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	4604      	mov	r4, r0
 8004efa:	460d      	mov	r5, r1
 8004efc:	ec51 0b19 	vmov	r0, r1, d9
 8004f00:	e727      	b.n	8004d52 <__ieee754_log+0x152>
 8004f02:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004f58 <__ieee754_log+0x358>
 8004f06:	e694      	b.n	8004c32 <__ieee754_log+0x32>
 8004f08:	fee00000 	.word	0xfee00000
 8004f0c:	3fe62e42 	.word	0x3fe62e42
 8004f10:	35793c76 	.word	0x35793c76
 8004f14:	3dea39ef 	.word	0x3dea39ef
 8004f18:	55555555 	.word	0x55555555
 8004f1c:	3fd55555 	.word	0x3fd55555
 8004f20:	df3e5244 	.word	0xdf3e5244
 8004f24:	3fc2f112 	.word	0x3fc2f112
 8004f28:	96cb03de 	.word	0x96cb03de
 8004f2c:	3fc74664 	.word	0x3fc74664
 8004f30:	94229359 	.word	0x94229359
 8004f34:	3fd24924 	.word	0x3fd24924
 8004f38:	55555593 	.word	0x55555593
 8004f3c:	3fe55555 	.word	0x3fe55555
 8004f40:	d078c69f 	.word	0xd078c69f
 8004f44:	3fc39a09 	.word	0x3fc39a09
 8004f48:	1d8e78af 	.word	0x1d8e78af
 8004f4c:	3fcc71c5 	.word	0x3fcc71c5
 8004f50:	9997fa04 	.word	0x9997fa04
 8004f54:	3fd99999 	.word	0x3fd99999
	...
 8004f60:	c3500000 	.word	0xc3500000
 8004f64:	43500000 	.word	0x43500000
 8004f68:	7fefffff 	.word	0x7fefffff
 8004f6c:	3ff00000 	.word	0x3ff00000
 8004f70:	3fe00000 	.word	0x3fe00000

08004f74 <_init>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	bf00      	nop
 8004f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	469e      	mov	lr, r3
 8004f7e:	4770      	bx	lr

08004f80 <_fini>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr
